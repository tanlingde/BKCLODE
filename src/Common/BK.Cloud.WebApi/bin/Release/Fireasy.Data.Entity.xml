<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fireasy.Data.Entity</name>
    </assembly>
    <members>
        <member name="T:Fireasy.Data.Entity.EntityRepository`1">
            <summary>
            表示在 <see cref="T:Fireasy.Data.Entity.EntityContext"/> 实例中对实体 <typeparamref name="TEntity"/> 的仓储。它可以用于直接对实体进行创建、查询、修改和删除。
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.QuerySet`1">
            <summary>
            提供对特定数据源的查询进行计算的功能。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.QuerySet`1.GetEnumerator">
            <summary>
            返回枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.QuerySet`1.QueryText">
            <summary>
            获取查询解释文本。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IQueryProviderAware">
            <summary>
            表示能够发现 <see cref="T:System.Linq.IQueryProvider"/> 对象。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IRepository`1">
            <summary>
            表示实体泛型的仓储。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
        </member>
        <member name="T:Fireasy.Data.Entity.IRepository">
            <summary>
            表示对象的仓储。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.Get(System.Object[])">
            <summary>
            通过一组主键值返回一个对象。
            </summary>
            <param name="primaryValues">一组主键值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.Insert(System.Object)">
            <summary>
            将一个新的对象插入到库。
            </summary>
            <param name="entity">要创建的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.Update(System.Object)">
            <summary>
            更新一个对象。
            </summary>
            <param name="entity">要更新的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.InsertOrUpdate(System.Object)">
            <summary>
            将对象的改动保存到库。
            </summary>
            <param name="entity">要保存的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.Delete(System.Object,System.Boolean)">
            <summary>
            将指定的对象从库中删除。
            </summary>
            <param name="entity">要移除的对象。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.Delete(System.Object[],System.Boolean)">
            <summary>
            根据主键值将对象从库中删除。
            </summary>
            <param name="primaryValues">一组主键值。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.InsertAsync(System.Object)">
            <summary>
            将一个新的对象插入到库。
            </summary>
            <param name="entity">要创建的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.UpdateAsync(System.Object)">
            <summary>
            更新一个对象。
            </summary>
            <param name="entity">要更新的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.InsertOrUpdateAsync(System.Object)">
            <summary>
            将对象的改动保存到库。
            </summary>
            <param name="entity">要保存的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.DeleteAsync(System.Object,System.Boolean)">
            <summary>
            将指定的对象从库中删除。
            </summary>
            <param name="entity">要移除的对象。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository.DeleteAsync(System.Object[],System.Boolean)">
            <summary>
            根据主键值将对象从库中删除。
            </summary>
            <param name="primaryValues">一组主键值。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.BatchInsert(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Action{System.Int32})">
            <summary>
            批量将一组实体对象插入到库中。
            </summary>
            <param name="entities">一组要插入实体对象。</param>
            <param name="batchSize">每一个批次插入的实体数量。默认为 1000。</param>
            <param name="completePercentage">已完成百分比的通知方法。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Get(System.Object[])">
            <summary>
            通过一组主键值返回一个实体对象。
            </summary>
            <param name="primaryValues">一组主键值。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Insert(`0)">
            <summary>
            将一个新的实体对象插入到库。
            </summary>
            <param name="entity">要创建的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Update(`0)">
            <summary>
            更新一个实体对象。
            </summary>
            <param name="entity">要更新的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个参照的实体对象更新满足条件的一序列对象。
            </summary>
            <param name="entity">更新的参考对象。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个 <see cref="T:System.Linq.Expressions.MemberInitExpression"/> 表达式更新满足条件的一序列对象。
            </summary>
            <param name="factory">一个构造实例并成员绑定的表达式。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.InsertOrUpdate(`0)">
            <summary>
            将实体对象的改动保存到库。
            </summary>
            <param name="entity">要保存的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Delete(`0,System.Boolean)">
            <summary>
            将指定的实体对象从库中删除。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            将满足条件的一组对象从库中移除。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <param name="logicalDelete">是否为逻辑删除</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Batch(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{Fireasy.Data.Entity.IRepository{`0},`0,System.Int32}})">
            <summary>
            对实体集合进行批量操作。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instances"></param>
            <param name="fnOperation"></param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Associate(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.IEnumerable}})">
            <summary>
            
            </summary>
            <param name="memberQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            
            </summary>
            <param name="fnMember"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.BatchInsertAsync(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Action{System.Int32})">
            <summary>
            批量将一组实体对象插入到库中。
            </summary>
            <param name="entities">一组要插入实体对象。</param>
            <param name="batchSize">每一个批次插入的实体数量。默认为 1000。</param>
            <param name="completePercentage">已完成百分比的通知方法。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.InsertAsync(`0)">
            <summary>
            将一个新的实体对象插入到库。
            </summary>
            <param name="entity">要创建的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.UpdateAsync(`0)">
            <summary>
            更新一个实体对象。
            </summary>
            <param name="entity">要更新的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个参照的实体对象更新满足条件的一序列对象。
            </summary>
            <param name="entity">更新的参考对象。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个 <see cref="T:System.Linq.Expressions.MemberInitExpression"/> 表达式更新满足条件的一序列对象。
            </summary>
            <param name="factory">一个构造实例并成员绑定的表达式。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.InsertOrUpdateAsync(`0)">
            <summary>
            将实体对象的改动保存到库。
            </summary>
            <param name="entity">要保存的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.DeleteAsync(`0,System.Boolean)">
            <summary>
            将指定的实体对象从库中删除。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            将满足条件的一组对象从库中移除。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <param name="logicalDelete">是否为逻辑删除</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IRepository`1.BatchAsync(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{Fireasy.Data.Entity.IRepository{`0},`0,System.Int32}})">
            <summary>
            对实体集合进行批量操作。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instances"></param>
            <param name="fnOperation"></param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.#ctor(Fireasy.Data.Entity.Linq.InternalContext)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityRepository`1"/> 类的新实例。
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Get(System.Object[])">
            <summary>
            通过一组主键值返回一个实体对象。
            </summary>
            <param name="primaryValues">一组主键值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Insert(`0)">
            <summary>
            将一个新的实体对象创建到库。
            </summary>
            <param name="entity">要创建的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.BatchInsert(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Action{System.Int32})">
            <summary>
            批量将一组实体对象插入到库中。
            </summary>
            <param name="entities">一组要插入实体对象。</param>
            <param name="batchSize">每一个批次插入的实体数量。默认为 1000。</param>
            <param name="completePercentage">已完成百分比的通知方法。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.InsertOrUpdate(`0)">
            <summary>
            根据实体的状态，插入或更新实体对象。
            </summary>
            <param name="entity">要保存的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Delete(`0,System.Boolean)">
            <summary>
            将指定的实体对象从库中移除。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Delete(System.Object[],System.Boolean)">
            <summary>
            根据主键值将对象从库中移除。
            </summary>
            <param name="primaryValues">一组主键值。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            将满足条件的一组对象从库中移除。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <param name="logicalDelete">是否为逻辑删除</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Update(`0)">
            <summary>
            更新一个实体对象。
            </summary>
            <param name="entity">实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个参照的实体对象更新满足条件的一序列对象。
            </summary>
            <param name="entity">更新的参考对象。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个 <see cref="T:System.Linq.Expressions.MemberInitExpression"/> 表达式更新满足条件的一序列对象。
            </summary>
            <param name="factory">一个构造实例并成员绑定的表达式。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个累加器更新满足条件的一序列对象。
            </summary>
            <param name="calculator">一个计算器表达式。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Batch(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{Fireasy.Data.Entity.IRepository{`0},`0,System.Int32}})">
            <summary>
            对实体集合进行批量操作。
            </summary>
            <param name="instances">要操作的实体序列。</param>
            <param name="fnOperation">实体操作表达式，权提供 Insert、Update 和 Delete 操作。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Where(System.String,System.String,Fireasy.Data.IDataSegment,Fireasy.Data.ParameterCollection)">
            <summary>
            返回满足条件的一组实体对象。
            </summary>
            <param name="condition">一般的条件语句。</param>
            <param name="orderBy">排序语句。</param>
            <param name="segment">数据分段对象。</param>
            <param name="parameters">查询参数集合。</param>
            <returns>当前类型的实体枚举器。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.InsertAsync(`0)">
            <summary>
            将一个新的实体对象创建到库。
            </summary>
            <param name="entity">要创建的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.BatchInsertAsync(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Action{System.Int32})">
            <summary>
            批量将一组实体对象插入到库中。
            </summary>
            <param name="entities">一组要插入实体对象。</param>
            <param name="batchSize">每一个批次插入的实体数量。默认为 1000。</param>
            <param name="completePercentage">已完成百分比的通知方法。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.InsertOrUpdateAsync(`0)">
            <summary>
            根据实体的状态，插入或更新实体对象。
            </summary>
            <param name="entity">要保存的实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.DeleteAsync(`0,System.Boolean)">
            <summary>
            将指定的实体对象从库中移除。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.DeleteAsync(System.Object[],System.Boolean)">
            <summary>
            根据主键值将对象从库中移除。
            </summary>
            <param name="primaryValues">一组主键值。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            将满足条件的一组对象从库中移除。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <param name="logicalDelete">是否为逻辑删除</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.UpdateAsync(`0)">
            <summary>
            更新一个实体对象。
            </summary>
            <param name="entity">实体对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个参照的实体对象更新满足条件的一序列对象。
            </summary>
            <param name="entity">更新的参考对象。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个 <see cref="T:System.Linq.Expressions.MemberInitExpression"/> 表达式更新满足条件的一序列对象。
            </summary>
            <param name="factory">一个构造实例并成员绑定的表达式。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个累加器更新满足条件的一序列对象。
            </summary>
            <param name="calculator">一个计算器表达式。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.BatchAsync(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{Fireasy.Data.Entity.IRepository{`0},`0,System.Int32}})">
            <summary>
            对实体集合进行批量操作。
            </summary>
            <param name="instances">要操作的实体序列。</param>
            <param name="fnOperation">实体操作表达式，权提供 Insert、Update 和 Delete 操作。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            指定要包括在查询结果中的关联对象。
            </summary>
            <param name="fnMember">要包含的属性的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Associate(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.IEnumerable}})">
            <summary>
            对指定割开的查询始终附加指定的谓语。
            </summary>
            <param name="memberQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Fireasy#Data#Entity#IRepository#Get(System.Object[])">
            <summary>
            通过一组主键值返回一个对象。
            </summary>
            <param name="primaryValues">一组主键值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Fireasy#Data#Entity#IRepository#Insert(System.Object)">
            <summary>
            将一个新的对象插入到库。
            </summary>
            <param name="entity">要创建的对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Fireasy#Data#Entity#IRepository#Update(System.Object)">
            <summary>
            更新一个对象。
            </summary>
            <param name="entity">要更新的对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Fireasy#Data#Entity#IRepository#InsertOrUpdate(System.Object)">
            <summary>
            将对象的改动保存到库。
            </summary>
            <param name="entity">要保存的对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Fireasy#Data#Entity#IRepository#Delete(System.Object,System.Boolean)">
            <summary>
            将指定的对象从库中删除。
            </summary>
            <param name="entity">要移除的对象。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Fireasy#Data#Entity#IRepository#InsertAsync(System.Object)">
            <summary>
            将一个新的对象插入到库。
            </summary>
            <param name="entity">要创建的对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Fireasy#Data#Entity#IRepository#UpdateAsync(System.Object)">
            <summary>
            更新一个对象。
            </summary>
            <param name="entity">要更新的对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Fireasy#Data#Entity#IRepository#InsertOrUpdateAsync(System.Object)">
            <summary>
            将对象的改动保存到库。
            </summary>
            <param name="entity">要保存的对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRepository`1.Fireasy#Data#Entity#IRepository#DeleteAsync(System.Object,System.Boolean)">
            <summary>
            将指定的对象从库中删除。
            </summary>
            <param name="entity">要移除的对象。</param>
            <param name="logicalDelete">是否为逻辑删除。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityRepository`1.EntityType">
            <summary>
            获取关联的实体类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityRepository`1.Provider">
            <summary>
            获取 <see cref="T:System.Linq.IQueryProvider"/> 对象。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder">
            <summary>
            提供动态构造实体的生成器。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.#ctor(System.String,Fireasy.Common.Emit.DynamicAssemblyBuilder,System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder"/> 类的新实例。
            </summary>
            <param name="typeName">动态类的类型名称。</param>
            <param name="assemblyBuilder">一个 <see cref="T:Fireasy.Common.Emit.DynamicAssemblyBuilder"/> 容器。</param>
            <param name="baseType">所要继承的抽象类型，默认为 <see cref="T:Fireasy.Data.Entity.EntityObject"/> 类。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.DefineValidateRule(Fireasy.Data.Entity.IProperty,System.Linq.Expressions.Expression{System.Func{System.Attribute}}[])">
            <summary>
            为属性添加验证规则。
            </summary>
            <param name="property">要验证的属性。</param>
            <param name="attributes">一组 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> 特性。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.DefineValidateRule(System.Linq.Expressions.Expression{System.Func{System.Attribute}}[])">
            <summary>
            为实体添加验证规则。
            </summary>
            <param name="attributes">一组 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> 特性。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.SetCustomAttribute(System.Linq.Expressions.Expression{System.Func{System.Attribute}})">
            <summary>
            为动态类添加特性。
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.Create">
            <summary>
            创建一个动态的实体类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.MakeMemberInitExpression(System.Object)">
            <summary>
            创建一个新对象并初始化的表达式。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.MakeLambdaExpression(Fireasy.Data.Entity.IProperty)">
            <summary>
            根据一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression"/>。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.DefineMetadataType">
            <summary>
            定义 MetadataTypeAttribute 类。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.TypeName">
            <summary>
            获取实体类的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.Mapping">
            <summary>
            获取或设置映射对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.Properties">
            <summary>
            获取或设置包含的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Dynamic.EntityTypeBuilder.ImplInterfaces">
            <summary>
            获取或设置要实现的接口类型。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Dynamic.EntityPersister">
            <summary>
            一个抽象类，提供对动态实体类型的持久化操作。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IEntityPersistentEnvironment">
            <summary>
            提供持久化环境的支持。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IEntityPersistentEnvironment.Environment">
            <summary>
            获取或设置环境对象。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IEntityPersistentInstanceContainer">
            <summary>
            用于放置当前环境中有效的实例名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IEntityPersistentInstanceContainer.InstanceName">
            <summary>
            获取或设置实例名称。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Dynamic.EntityPersister"/> 类的新实例。
            </summary>
            <param name="instanceName">实例名。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.GetEntityType">
            <summary>
            获取实体类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.NewEntity">
            <summary>
            构造一个动态实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.BuildEntityType">
            <summary>
            构造实体类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Create(System.Object)">
            <summary>
            将一个新的实体对象创建到库。
            </summary>
            <param name="entity">要创建的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Save(System.Object)">
            <summary>
            将实体对象的改动保存到库。
            </summary>
            <param name="entity">要保存的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Save(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            将一组实体对象的更改保存到库。不会更新实体的其他引用属性。
            </summary>
            <param name="entities">要保存的实体序列。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Update(System.Object)">
            <summary>
            更新实体对象的修改。
            </summary>
            <param name="entity">要更新的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Remove(System.Object,System.Boolean)">
            <summary>
            将指定的实体对象从库中移除。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <param name="fake">如果具有 IsDeletedKey 属性，则提供对数据假删除的支持。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Remove(System.Object[],System.Boolean)">
            <summary>
            根据主键值将对象从库中移除。
            </summary>
            <param name="primaryValues">主键的值。数组的长度必须与实体所定义的主键相匹配。</param>
            <param name="fake">如果具有 IsDeletedKey 属性，则提供对对象假删除的支持。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Query(System.String,System.String,Fireasy.Data.IDataSegment,Fireasy.Data.ParameterCollection)">
            <summary>
            返回满足条件的一组实体对象。
            </summary>
            <param name="condition">一般的条件语句。</param>
            <param name="orderBy">排序语句。</param>
            <param name="segment">数据分段对象。</param>
            <param name="parameters">查询参数集合。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Query(Fireasy.Data.IQueryCommand,Fireasy.Data.IDataSegment,Fireasy.Data.ParameterCollection)">
            <summary>
            根据自定义的SQL语句查询返回一组动态对象。
            </summary>
            <param name="queryCommand">查询命令。</param>
            <param name="segment">数据分段对象。</param>
            <param name="parameters">查询参数集合。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.First(System.Object[])">
            <summary>
            使用主键值查询返回一个实体。
            </summary>
            <param name="primaryValues">主键的值。数组的长度必须与实体所定义的主键相匹配。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.EntityPersister.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.Dynamic.EntityPersister.Database">
            <summary>
            获取当前所使用的 <see cref="T:Fireasy.Data.IDatabase"/> 对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Dynamic.EntityPersister.Environment">
            <summary>
            获取或设置持久化环境。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Dynamic.EntityPersister.InstanceName">
            <summary>
            获取或设置实例名称。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Dynamic.AssignedEntityPersister">
            <summary>
            指定实体类型的持久化类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.AssignedEntityPersister.#ctor(System.Type)">
            <summary>
            使用给定的实体类型初始化 <see cref="T:Fireasy.Data.Entity.Dynamic.AssignedEntityPersister"/> 类的新实例。
            </summary>
            <param name="entityType">实体类型。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.AssignedEntityPersister.BuildEntityType">
            <summary>
            返回构造函数中指定的实体类型。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Dynamic.RelationshipBuilder">
            <summary>
            提供动态构造实体类之间关系的生成器。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.RelationshipBuilder.#ctor(Fireasy.Common.Emit.DynamicAssemblyBuilder)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Dynamic.RelationshipBuilder"/> 类的新实例。
            </summary>
            <param name="assemblyBuilder">一个 <see cref="T:Fireasy.Common.Emit.DynamicAssemblyBuilder"/> 容器。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.RelationshipBuilder.DefineRelation(System.Type,System.Type,System.String)">
            <summary>
            定义两个实体类间的关系。
            </summary>
            <param name="thisType"></param>
            <param name="otherType"></param>
            <param name="keyExpression"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Dynamic.RelationshipBuilder.DefineRelation(System.Type,System.Type,Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.RelationshipStyle)">
            <summary>
            定义两个实体类间的关系。
            </summary>
            <param name="thisType"></param>
            <param name="otherType"></param>
            <param name="thisProperty"></param>
            <param name="otherProperty"></param>
            <param name="style"></param>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityContext">
            <summary>
            提供以对象形式查询和使用实体数据的功能。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IUnitOfWork">
            <summary>
            工作单元接口。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.IUnitOfWork.CreateRepository``1">
            <summary>
            创建 <typeparamref name="TEntity"/> 类型的仓储实例。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityContext"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.#ctor(System.String)">
            <summary>
            使用一个配置名称来初始化 <see cref="T:Fireasy.Data.Entity.EntityContext"/> 类的新实例。
            </summary>
            <param name="name">配置名称。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.Finalize">
            <summary>
            析构函数。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.Dispose">
            <summary>
            销毁资源。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.Dispose(System.Boolean)">
            <summary>
            销毁资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.Set``1">
            <summary>
            为指定的类型返回 <see cref="T:Fireasy.Data.Entity.EntityRepository`1"/>
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.Set(System.Type)">
            <summary>
            为指定的类型返回 <see cref="T:Fireasy.Data.Entity.IRepository"/>
            </summary>
            <param name="entitytype">实体类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.Fireasy#Data#Entity#IUnitOfWork#CreateRepository``1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.CreateTreePersister``1">
            <summary>
            创建实体持久化实例。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            指定要包括在查询结果中的关联对象。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="fnMember">要包含的属性的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.Associate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.IEnumerable}})">
            <summary>
            对关联对象
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="memberQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.Apply``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="fnApply"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开始事务。
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.CommitTransaction">
            <summary>
            提交事务。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityContext.RollbackTransaction">
            <summary>
            回滚事务。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityContext.Database">
            <summary>
            获取关联的 <see cref="T:Fireasy.Data.IDatabase"/> 对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityContext.Provider">
            <summary>
            获取 <see cref="T:System.Linq.IQueryProvider"/> 对象。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityLzayManager">
            <summary>
            实体延迟加载的管理器。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityLzayManager.#ctor(System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityLzayManager"/> 类的新实例。
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityLzayManager.SetValueCreated(System.String)">
            <summary>
            设置指定名称的属性的值已经创建。
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityLzayManager.IsValueCreated(System.String)">
            <summary>
            判断指定名称的属性的值是否已经创建。
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTransactionScopeOption">
            <summary>
            为实体持久化工作区提供一些选项。无法继承此类。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTransactionScopeOption.IsolationLevel">
            <summary>
            获取或设置事务的锁定行为。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTransactionScopeOption.Timeout">
            <summary>
            获取或设置事务超时时间。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreePersistentHelper">
            <summary>
            实体树持久化的辅助类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.#ctor(Fireasy.Data.IDatabase,System.Type,Fireasy.Data.Entity.Metadata.EntityTreeMetadata,Fireasy.Data.Entity.EntityPersistentEnvironment)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreePersistentHelper"/> 类的新实例。
            </summary>
            <param name="database"></param>
            <param name="entityType"></param>
            <param name="metadata"></param>
            <param name="environment"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.#ctor(Fireasy.Data.IDatabase,System.Type,Fireasy.Data.Entity.EntityTreeMappingAttribute,Fireasy.Data.Entity.EntityPersistentEnvironment)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreePersistentHelper"/> 类的新实例。
            </summary>
            <param name="database"></param>
            <param name="entityType"></param>
            <param name="attribute"></param>
            <param name="environment"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.Create(Fireasy.Data.Entity.IEntity)">
            <summary>
            将一个新的实体对象持久化。
            </summary>
            <param name="entity">要持久化的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.Update(Fireasy.Data.Entity.IEntity)">
            <summary>
            更新实体对象的修改。如果已经定义了 FullName 则会更新当前对象及相关的子实体对象 的 FullName 属性。
            </summary>
            <param name="entity">要更新的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.Insert(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.EntityTreePosition)">
            <summary>
            将一个实体插入到参照实体的相应位置。
            </summary>
            <param name="entity">插入的实体。</param>
            <param name="referEntity">参照的实体。</param>
            <param name="position">插入的位置。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.Move(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IEntity,System.Nullable{Fireasy.Data.Entity.EntityTreePosition})">
            <summary>
            将一个实体移动到参照实体的相应位置。
            </summary>
            <param name="entity">要移动的实体。</param>
            <param name="referEntity">参照的实体。</param>
            <param name="position">移动的位置。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.Remove(Fireasy.Data.Entity.IEntity,System.Boolean)">
            <summary>
            将指定的实体对象从库中移除。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <param name="fake">如果具有 IsDeletedKey 属性，则提供对数据假删除的支持。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.Swap(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IEntity)">
            <summary>
            将两个实体的位置进行交换，且相关的子实体也跟随移动。
            </summary>
            <param name="entityA">要交换的实体A。</param>
            <param name="entityB">要交换的实体B。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.ShiftUp(Fireasy.Data.Entity.IEntity)">
            <summary>
            将实体在同一层级上进行上移。
            </summary>
            <param name="entity">要移动的实体。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.ShiftDown(Fireasy.Data.Entity.IEntity)">
            <summary>
            将实体在同一层级上进行下移。
            </summary>
            <param name="entity">要移动的实体。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.IsParental(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IEntity)">
            <summary>
            判断两个实体是否具有直属关系。
            </summary>
            <param name="entityA">实体A。</param>
            <param name="entityB">实体B。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetPaternalPosition(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IEntity)">
            <summary>
            判断两个实体的父子身份。
            </summary>
            <param name="entityA">实体A。</param>
            <param name="entityB">实体B。</param>
            <returns>如果两个实体没有父子关系，则为 0，如果 entityA 是 entityB 的长辈，则为 1，反之为 -1。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.IsBrotherly(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IEntity)">
            <summary>
            判断两个实体是否具有兄弟关系。
            </summary>
            <param name="entityA">实体A。</param>
            <param name="entityB">实体B。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetPreviousSibling(Fireasy.Data.Entity.IEntity)">
            <summary>
            获取上一个兄弟。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetNextSibling(Fireasy.Data.Entity.IEntity)">
            <summary>
            获取下一个兄弟。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.QueryChildren(Fireasy.Data.Entity.IEntity,System.String,Fireasy.Data.ParameterCollection,System.Boolean)">
            <summary>
            查询指定实体的孩子。
            </summary>
            <param name="entity">当前实体。</param>
            <param name="condition">附加的条件。</param>
            <param name="parameters">查询参数集合。</param>
            <param name="recurrence">是否递归出所有孩子。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.RecurrenceParent(Fireasy.Data.Entity.IEntity)">
            <summary>
            递归返回实体的父亲实体。
            </summary>
            <param name="entity">当前实体。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.HasChildren(Fireasy.Data.Entity.IEntity,System.String,Fireasy.Data.ParameterCollection)">
            <summary>
            判断实体是否具有孩子。
            </summary>
            <param name="entity">当前实体。</param>
            <param name="condition">附加的条件。</param>
            <param name="parameters">查询参数集合。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.RaiseEntityTreeUpdating(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument,Fireasy.Data.Entity.EntityTreeUpdatingAction)">
            <summary>
            触发 <see cref="E:Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpdating"/> 事件。
            </summary>
            <param name="entity"></param>
            <param name="arg"></param>
            <param name="action"></param>
            <returns>如果客户端已取消，则为 false。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.RaiseEntityTreeUpdating(Fireasy.Data.Entity.EntityTreeUpdatingEventArgs)">
            <summary>
            触发 <see cref="E:Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpdating"/> 事件。
            </summary>
            <param name="e"></param>
            <returns>如果客户端已取消，则为 false。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.IsBrotherly(Fireasy.Data.Entity.EntityTreeUpdatingBag,Fireasy.Data.Entity.EntityTreeUpdatingBag)">
            <summary>
            使用 <see cref="T:Fireasy.Data.Entity.EntityTreeUpdatingBag"/> 判断是否具有兄弟关系。
            </summary>
            <param name="bag1"></param>
            <param name="bag2"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.CheckEntityTreeMetadata(System.Type,Fireasy.Data.Entity.Metadata.EntityTreeMetadata)">
            <summary>
            检查必须要有的几个属性。
            </summary>
            <param name="entityType"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetChildren(Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument)">
            <summary>
            获取孩子、孙子、重孙...。
            </summary>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetBrothersAndChildren(Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument,System.Boolean,Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument,System.Boolean)">
            <summary>
            获取兄弟及他们的孩子。
            </summary>
            <param name="argument"></param>
            <param name="includeCurrent">是否包含当 <paramref name="argument"/>，当在它前面插入时，需要包含它。</param>
            <param name="excludeArg">要排除的实体。</param>
            <param name="isTop">是否遇到要排除的实体就终止。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.UpdateChildrenFullName(Fireasy.Data.Entity.IEntity,System.Collections.IEnumerable,System.String)">
            <summary>
            更新所有孩子的全名。
            </summary>
            <param name="current">当前的实体对象。</param>
            <param name="children">要更新的子实体对象。</param>
            <param name="fuleName">当前实体对象的全名。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.UpdateBrothersAndChildren(Fireasy.Data.Entity.IEntity,System.Collections.IEnumerable,System.String,System.Int32)">
            <summary>
            将兄弟和孩子的前N级编码前移或后移，N取决于currentInnerId的长度，如果currentInnerId为空，则取数据表中的第一行数据的InnerID
            </summary>
            <param name="current">当前的实体对象。</param>
            <param name="entities">要移动的子实体对象。</param>
            <param name="currentInnerId">当前的内码。</param>
            <param name="position">移动的偏离位置。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.UpdateMoveToRoot(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument)">
            <summary>
            节点移动到根目录下，相关节点的更新。
            </summary>
            <param name="current"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.UpdateMoveAsChildren(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument,Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument)">
            <summary>
            将子节点移动到另一个子节点的下面。
            </summary>
            <param name="entity"></param>
            <param name="referEntity"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.IsInList(Fireasy.Data.Entity.IEntity,System.Collections.IEnumerable)">
            <summary>
            判断实体是否在指定的集合中。如果它在集合中，它有可能被修改。
            </summary>
            <param name="entity"></param>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.RemoveChildren(Fireasy.Data.Entity.IEntity,System.Collections.IEnumerable,System.Boolean)">
            <summary>
            移除所有子节点。
            </summary>
            <param name="current">当前的实体对象。</param>
            <param name="entities">要移除的子实体对象。</param>
            <param name="fake">是否假删除。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetNewOrderNumber(Fireasy.Data.Entity.EntityTreeUpdatingBag,Fireasy.Data.Entity.EntityTreePosition,System.Int32)">
            <summary>
            取参照实体的最大order值。
            </summary>
            <param name="bag"></param>
            <param name="mode"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetNewOrderNumber">
            <summary>
            取顶层的最大order值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.CheckMovable(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IEntity)">
            <summary>
            判断是否可以移动。
            </summary>
            <param name="entity"></param>
            <param name="referEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.CheckNeedMove(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.EntityTreePosition)">
            <summary>
            检查是否需要移动。
            </summary>
            <param name="entity"></param>
            <param name="referEntity"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetOrderExpression">
            <summary>
            获取Order的表达式。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetLevelExpression">
            <summary>
            获取Level的表达式。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GenerateInnerId(System.String,Fireasy.Data.Entity.PropertyValue,Fireasy.Data.Entity.EntityTreePosition)">
            <summary>
            生成内码。
            </summary>
            <param name="keyId"></param>
            <param name="order"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetPreviousKey(System.String,System.Int32)">
            <summary>
            取前面n级内码
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetPreviousFullName(System.String)">
            <summary>
            取前面一级的全名
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetRightFullName(System.String,System.Int32)">
            <summary>
            获取右边的全名
            </summary>
            <param name="fullName"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GenerateFullName(Fireasy.Data.Entity.IEntity)">
            <summary>
            使用当前节点生成新的全名
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GenerateFullName(Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument,Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument,Fireasy.Data.Entity.EntityTreePosition)">
            <summary>
            生成新的全名，以参考节点的全名作为基础
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.QuoteColumn(Fireasy.Data.Entity.IProperty)">
            <summary>
            获取属性的对应的字段表达式，并在前后加上标识符。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetTableName">
            <summary>
            获取实体类所对应的表的名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.GetUseableProperties">
            <summary>
            获取可以组织到查询里的属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.CreateUpdatingArgument(Fireasy.Data.Entity.IEntity)">
            <summary>
            根据指定的实体创建一个 <see cref="T:Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument"/> 对象。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.ParseEntityData(Fireasy.Data.Entity.IEntity)">
            <summary>
            从 <see cref="T:Fireasy.Data.Entity.IEntity"/> 中解析出各个树属性。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.UpdateEntityByArgument(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument,System.Boolean)">
            <summary>
            使用 <see cref="T:Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpfydatingArgument"/> 更新实体属性。
            </summary>
            <param name="entity"></param>
            <param name="argument"></param>
            <param name="force">是否强制修改。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.CreatePersisterHelper">
            <summary>
            创建底层的 <see cref="T:Fireasy.Data.Entity.EntityPersisterHelper"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentHelper.ToList(System.Collections.IEnumerable)">
            <summary>
            需要将 <see cref="T:System.Collections.IEnumerable"/> 转换成 <see cref="T:System.Collections.IList"/> 表示。
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="E:Fireasy.Data.Entity.EntityTreePersistentHelper.EntityTreeUpdating">
            <summary>
            实体树更新时通知客户端程序。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EqualityComparer`1">
            <summary>
            判断定义实体相等比较的方法。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.EqualityComparer`1.Equals(`0,`0)">
            <summary>
            指定的 x 是否等于 y。
            </summary>
            <param name="entityX">实体对象 x。</param>
            <param name="entityY">实体对象 y。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EqualityComparer`1.GetHashCode(`0)">
            <summary>
            获得实体对象的哈希值。
            </summary>
            <param name="entity">实体对象。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityDatabase">
            <summary>
            用于在持久化环境中对 <see cref="T:Fireasy.Data.IDatabase"/> 对象的包装。无法继承此类。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityDatabaseFactory">
            <summary>
            用于在实体持久化环境中创建 <see cref="T:Fireasy.Data.IDatabase"/> 实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityDatabaseFactory.CreateDatabase(System.String)">
            <summary>
            检查当前的 <see cref="T:Fireasy.Data.Entity.EntityTransactionScope"/> 实例，如果存在，则使用该对象所引用的 <see cref="T:Fireasy.Data.IDatabase"/> 实例；
            否则由 <see cref="T:Fireasy.Data.DatabaseFactory"/> 工厂进行创建。
            </summary>
            <param name="instanceName">配置实例名称。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Database"/> 实例对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityDatabaseFactory.StartTransaction(Fireasy.Data.IDatabase,Fireasy.Data.Entity.EntityTransactionScopeOption)">
            <summary>
            启动数据库事务。
            </summary>
            <param name="database"></param>
            <param name="option"></param>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityLazyloader">
            <summary>
            实体相关属性的延迟加载器。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityLazyloader.Load(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            加载实体指定的属性的值。
            </summary>
            <param name="entity">当前的实体对象。</param>
            <param name="property">要加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityLazyloader.AsyncLoad(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty,System.Action{Fireasy.Data.Entity.PropertyValue})">
            <summary>
            异步加载实体指定的属性的值。
            </summary>
            <param name="entity">当前的实体对象。</param>
            <param name="property">要加载的属性。</param>
            <param name="initializer">初始化器。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityLazyloadException">
            <summary>
            延迟载入实体的部份属性时引发的异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityLazyloadException.#ctor(System.String,Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityLazyloadException"/> 类的新实例。
            </summary>
            <param name="message">指定此异常的信息。</param>
            <param name="entity">当前的实体对象。</param>
            <param name="property">当前加载的属性。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityLazyloadException.Entity">
            <summary>
            获取当前的实体对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityLazyloadException.Property">
            <summary>
            获取当前加载的属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityPersisterHelper">
            <summary>
            实体持久化的辅助类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersisterHelper.#ctor(Fireasy.Data.IDatabase,System.Type,Fireasy.Data.Entity.EntityPersistentEnvironment)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityPersisterHelper"/> 类的新实例。
            </summary>
            <param name="database">提供给持久化操作的 <see cref="T:Fireasy.Data.Database"/> 对象。</param>
            <param name="entityType">实体的类型。</param>
            <param name="environment">实体持久化环境对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersisterHelper.Batch(System.Action)">
            <summary>
            使用数据库事务进行批处理。
            </summary>
            <param name="action">批量执行的方法。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersisterHelper.Create(Fireasy.Data.Entity.IEntity)">
            <summary>
            将一个新的实体对象创建到库。
            </summary>
            <param name="entity">要创建的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersisterHelper.Update(Fireasy.Data.Entity.IEntity)">
            <summary>
            更新实体对象的修改。
            </summary>
            <param name="entity">要更新的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersisterHelper.Remove(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty,System.Boolean)">
            <summary>
            将指定的实体对象从库中移除。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <param name="fakeProperty">标识假删除的属性。</param>
            <param name="fake">如果具有 IsDeletedKey 属性，则提供对数据假删除的支持。</param>
            <exception cref="T:System.NullReferenceException">对象内部的 Database 为 null。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersisterHelper.Remove(System.Object[],Fireasy.Data.Entity.IProperty,System.Boolean)">
            <summary>
            根据主键值将对象从库中移除。
            </summary>
            <param name="primaryValues">主键的值。数组的长度必须与实体所定义的主键相匹配。</param>
            <param name="fakeProperty">标识假删除的属性。</param>
            <param name="fake">如果具有 IsDeletedKey 属性，则提供对对象假删除的支持。</param>
            <exception cref="T:System.NullReferenceException">对象内部的 Database 或 EntityType 为 null。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="primaryValues"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersisterHelper.First(System.Object[],System.Func{System.Object,System.Object})">
            <summary>
            使用主键值查询返回一个实体。
            </summary>
            <param name="primaryValues">主键的值。数组的长度必须与实体所定义的主键相匹配。</param>
            <param name="func">对实体对象进行修饰的方法。</param>
            <returns>一个实体对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersisterHelper.Save(System.Collections.IEnumerable)">
            <summary>
            将一组实体对象的更改保存到库。不会更新实体的其他引用属性。
            </summary>
            <param name="entities">要保存的实体序列。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityUtility.SetEntityToNull(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            改为移除状态，确定该该实体删除。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityUtility.SetEntitySetToNull(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            清空并标识，将删除实体集中的所有对象。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityUtility.CheckReturnValue(Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            检查关联属性的空值，如果属性值已设置为null，则不应显示给客户端。
            </summary>
            <param name="property">要检查的属性。</param>
            <param name="value">属性的值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityUtility.CheckReturnEntityValue(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            检查返回的实体值是否为空值。
            </summary>
            <param name="entity"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityUtility.CheckReturnEntitySetValue(Fireasy.Data.Entity.IEntitySetInternalExtension,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            检查返回的实体集的值是否为空值。
            </summary>
            <param name="entitySet"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityUtility.AttachPrimaryKeyValues(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.Properties.RelationProperty,System.Collections.IEnumerable)">
            <summary>
            将实体的所有主键值赋给关联的实体属性。
            </summary>
            <param name="entity"></param>
            <param name="relationPro"></param>
            <param name="enumerable"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityUtility.CheckPrimaryProperty(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            检查主键值是否允许修改。
            </summary>
            <param name="entity"></param>
            <param name="property"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityUtility.GetAttachPrimaryKeyAction(System.Type)">
            <summary>
            获取使用主键值设置其他实体外键的方法。
            </summary>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityDiscoverAssemblyAttribute">
            <summary>
            标识程序集能够发现实体定义。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IEntityCloneable">
            <summary>
            支持实体的克隆。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityCloneable.Clone(System.Boolean)">
            <summary>
            克隆出一个新的实体对象。
            </summary>
            <param name="dismodified">如果为 true，将丢弃实体被修改后的属性值，沿用原来的值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntitySetInternalExtension.GetDetachedList">
            <summary>
            获取移除的列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntitySetInternalExtension.GetAttachedList">
            <summary>
            获取添加的列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntitySetInternalExtension.GetModifiedList">
            <summary>
            获取修改的列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntitySetInternalExtension.Reset">
            <summary>
            重置移除、添加和修改列表。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntitySetInternalExtension.NotifyModified(Fireasy.Data.Entity.IEntity)">
            <summary>
            通知实体已经修改。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.IEntitySetInternalExtension.EntityType">
            <summary>
            获取实体的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IEntitySetInternalExtension.IsNeedClear">
            <summary>
            获取或设置是否清空。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.LighEntityInterceptor">
            <summary>
            轻量级数据实体的 AOP 拦截器，用于注入 GetValue 和 SetValue 方法。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.LighEntityObject`1">
            <summary>
            轻量级的数据实体，继承此类不需要显式定义 <see cref="T:Fireasy.Data.Entity.IProperty"/> 。该类型基于 AOP 实现，属性必须使用 Virtual 声明。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityObject">
            <summary>
            表示数据实体。该类型通过定义多个静态的 <see cref="T:Fireasy.Data.Entity.IProperty"/> 来映射业务实体的属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IEntity">
            <summary>
            实体的接口。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntity.GetValue(System.String)">
            <summary>
            获取指定属性的值。
            </summary>
            <param name="propertyName">实体属性名称。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntity.SetValue(System.String,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            设置指定属性的值。
            </summary>
            <param name="propertyName">实体属性名称。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.IEntity.EntityState">
            <summary>
            获取实体的状态。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IEntity.EntityType">
            <summary>
            获取实体的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IEntityPropertyAccessor">
            <summary>
            提供对实体属性访问的方法。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityPropertyAccessor.GetValue(Fireasy.Data.Entity.IProperty)">
            <summary>
            获取指定属性的值。
            </summary>
            <param name="property">实体属性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityPropertyAccessor.SetValue(Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            设置指定属性的值。
            </summary>
            <param name="property">实体属性。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.IEntityStatefulExtension">
            <summary>
            提供实体内部状态化的扩展支持。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.SetState(Fireasy.Data.Entity.EntityState)">
            <summary>
            将实体修改为指定的状态。
            </summary>
            <param name="state">新的状态。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.ResetUnchanged">
            <summary>
            重置实体的状态。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.GetModifiedProperties">
            <summary>
            获取已经修改的属性名称数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.GetOldValue(Fireasy.Data.Entity.IProperty)">
            <summary>
            获取属性修改前的值。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.GetDirectValue(Fireasy.Data.Entity.IProperty)">
            <summary>
            直接获取属性的值。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.InitializateValue(Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.PropertyValue,System.Boolean)">
            <summary>
            初始化属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="modify"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.SetOwner(Fireasy.Data.Entity.IEntitySet)">
            <summary>
            设置所属的实体集。
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.SetOwner(Fireasy.Data.Entity.IEntity)">
            <summary>
            设置所属的实体。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.IsModified(System.String)">
            <summary>
            判断是否已经修改。
            </summary>
            <param name="propertyName">属性名称。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.IEntityStatefulExtension.NotifyModified">
            <summary>
            通知实体已经修改。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IEntityStatefulExtension.IsModifyLocked">
            <summary>
            是否处于修改锁定状态。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityObject"/> 类的新实例。对象的初始状态为 Attached。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.GetValue``1(Fireasy.Data.Entity.IProperty)">
            <summary>
            获取指定属性的值。
            </summary>
            <typeparam name="T">值的类型。</typeparam>
            <param name="property">实体属性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.GetValue(Fireasy.Data.Entity.IProperty)">
            <summary>
            获取指定属性的值。
            </summary>
            <param name="property">实体属性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.SetValue``1(Fireasy.Data.Entity.IProperty,``0)">
            <summary>
            设置指定属性的值。
            </summary>
            <typeparam name="T">值的类型。</typeparam>
            <param name="property">实体属性。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.SetValue(Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            设置指定属性的值。
            </summary>
            <param name="property">实体属性。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.IsValueCreated(System.String)">
            <summary>
            判断属性是否已经创建。
            </summary>
            <param name="propertyName">属性名称。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.OnPropertyChanging(Fireasy.Data.Entity.PropertyChangingEventArgs)">
            <summary>
            触发属性即将修改的通知事件。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.OnInitialized(System.EventArgs)">
            <summary>
            触发对象初始化的通知事件。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.OnPropertyChanged(Fireasy.Data.Entity.PropertyChangedEventArgs)">
            <summary>
            触发属性已被修改的通知事件。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.Fireasy#Data#Entity#IEntity#GetValue(System.String)">
            <summary>
            获取指定属性的值。
            </summary>
            <param name="propertyName">实体属性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.Fireasy#Data#Entity#IEntity#SetValue(System.String,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            设置指定属性的值。
            </summary>
            <param name="propertyName">实体属性。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.Fireasy#Data#Entity#IEntityStatefulExtension#NotifyModified">
            <summary>
            通知实体已经修改。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.BeginInit">
            <summary>
            初始化实体数据开始。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.EndInit">
            <summary>
            初始化实体数据结束。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.Equals(System.Object)">
            <summary>
            判断当前对象是否与指定的对象相等。
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.GetHashCode">
            <summary>
            返回当前对象的哈希值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.Clone">
            <summary>
            克隆出一个新的实体对象。克隆的新实体状态为 <see cref="!:EntityState.Attached"/>，且所有的属性变为被修改的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.Clone(System.Boolean)">
            <summary>
            克隆出一个新的实体对象。
            </summary>
            <param name="dismodified">如果为 true，将丢弃实体被修改后的属性值，沿用原来的值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.CloneInternal(System.Boolean,System.Boolean)">
            <summary>
            克隆实体。
            </summary>
            <param name="keepState">新实例是事保持原来实体的状态。</param>
            <param name="readOldValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.ProcessSupposedProperty(Fireasy.Data.Entity.IProperty)">
            <summary>
            处理附加属性的值。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.CheckValueEquals(Fireasy.Data.Entity.IProperty,System.Object,Fireasy.Data.Entity.PropertyValue@)">
            <summary>
            检查是否有原值相等。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="oldValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.CheckPropertyChangingIsCanceled(Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.PropertyValue,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            检查客户端是否取消属性值的更改。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="oldValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.InternalSetValue(Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            内部设置属性值的方法。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.SetNullable(Fireasy.Data.Entity.IProperty)">
            <summary>
            将关联属性的值设为 null。
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObject.CheckAndLazyPropertyValue(Fireasy.Data.Entity.IProperty)">
            <summary>
            检查并懒加载属性的值。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="E:Fireasy.Data.Entity.EntityObject.PropertyChanging">
            <summary>
            在属性即将修改时，通知客户端应用程序。
            </summary>
        </member>
        <member name="E:Fireasy.Data.Entity.EntityObject.PropertyChanged">
            <summary>
            在属性修改之后，通知客户端应用程序。
            </summary>
        </member>
        <member name="E:Fireasy.Data.Entity.EntityObject.Initialized">
            <summary>
            实体初始化完成的事件。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityObject.EntityState">
            <summary>
            获取实体的状态。
            </summary>
            <remarks>
            <para>使用构造函数创建，或往集合中添加的对象为 Attached；</para>
            <para>持久化后的对象为 Unchanged；</para>
            <para>一旦属性被修改为 Modified；</para>
            <para>从集合内移除时为 Detached。</para>
            <para>只有状态不为 Unchanged 的实体才能够持久化。</para>
            </remarks>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityObject.EntityType">
            <summary>
            获取实体的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityObject.Fireasy#Data#Entity#IEntityPersistentEnvironment#Environment">
            <summary>
            获取或设置持久化环境。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityObject.IsInitialized">
            <summary>
            获取实体数据是否已经初始化。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IPropertyAccessorBypass">
            <summary>
            用于绕开 GetValue 和 SetValue 方法。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.LighEntityObject`1.New">
            <summary>
            构造一个代理对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.LighEntityObject`1.Wrap(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            通过 <see cref="T:System.Linq.Expressions.MemberInitExpression"/> 表达式来构造一个代理对象。
            </summary>
            <param name="factory">一个成员绑定的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.LighEntityObject`1.InitMapInfo(Fireasy.Data.Entity.PropertyMappingAttribute,Fireasy.Data.Entity.PropertyMapInfo)">
            <summary>
            根据映射特性设置属性的映射信息。
            </summary>
            <param name="mapping"></param>
            <param name="mapInfo"></param>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.ExecutionBuilder">
            <summary>
            表达式执行计划的编译器。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor">
            <summary>
            一个抽象类，对 ELinq 表达式树进行访问。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.Expression"/>。
            </summary>
            <param name="exp">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitEntity(Fireasy.Data.Entity.Linq.Expressions.EntityExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.EntityExpression"/>。
            </summary>
            <param name="entity">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitTable(Fireasy.Data.Entity.Linq.Expressions.TableExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.TableExpression"/>。
            </summary>
            <param name="table">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitColumn(Fireasy.Data.Entity.Linq.Expressions.ColumnExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression"/>。
            </summary>
            <param name="column">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitSelect(Fireasy.Data.Entity.Linq.Expressions.SelectExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.SelectExpression"/>。
            </summary>
            <param name="select">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitSegment(Fireasy.Data.Entity.Linq.Expressions.SegmentExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.SegmentExpression"/>。
            </summary>
            <param name="segment">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitJoin(Fireasy.Data.Entity.Linq.Expressions.JoinExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.JoinExpression"/>。
            </summary>
            <param name="join">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitOuterJoined(Fireasy.Data.Entity.Linq.Expressions.OuterJoinedExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.OuterJoinedExpression"/>。
            </summary>
            <param name="outer">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitAggregate(Fireasy.Data.Entity.Linq.Expressions.AggregateExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.AggregateExpression"/>。
            </summary>
            <param name="aggregate">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitIsNull(Fireasy.Data.Entity.Linq.Expressions.IsNullExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.IsNullExpression"/>。
            </summary>
            <param name="isnull">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitBetween(Fireasy.Data.Entity.Linq.Expressions.BetweenExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.BetweenExpression"/>。
            </summary>
            <param name="between">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitRowNumber(Fireasy.Data.Entity.Linq.Expressions.RowNumberExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.RowNumberExpression"/>。
            </summary>
            <param name="rowNumber">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitSubquery(Fireasy.Data.Entity.Linq.Expressions.SubqueryExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.SubqueryExpression"/>。
            </summary>
            <param name="subquery">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitScalar(Fireasy.Data.Entity.Linq.Expressions.ScalarExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ScalarExpression"/>。
            </summary>
            <param name="scalar">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitExists(Fireasy.Data.Entity.Linq.Expressions.ExistsExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ExistsExpression"/>。
            </summary>
            <param name="exists">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitIn(Fireasy.Data.Entity.Linq.Expressions.InExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.InExpression"/>。
            </summary>
            <param name="in">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitAggregateSubquery(Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression"/>。
            </summary>
            <param name="aggregate">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitSource(System.Linq.Expressions.Expression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.Expression"/>。
            </summary>
            <param name="source">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitProjection(Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression"/>。
            </summary>
            <param name="proj">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitFunction(Fireasy.Data.Entity.Linq.Expressions.FunctionExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.FunctionExpression"/>。
            </summary>
            <param name="func">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitBatch(Fireasy.Data.Entity.Linq.Expressions.BatchCommandExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.BatchCommandExpression"/>。
            </summary>
            <param name="batch">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitDelete(Fireasy.Data.Entity.Linq.Expressions.DeleteCommandExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.DeleteCommandExpression"/>。
            </summary>
            <param name="delete">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitUpdate(Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression"/>。
            </summary>
            <param name="update">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitInsert(Fireasy.Data.Entity.Linq.Expressions.InsertCommandExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.InsertCommandExpression"/>。
            </summary>
            <param name="insert">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitBlock(Fireasy.Data.Entity.Linq.Expressions.BlockCommandExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.BlockCommandExpression"/>。
            </summary>
            <param name="block">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitColumnDeclarations(System.Collections.ObjectModel.ReadOnlyCollection{Fireasy.Data.Entity.Linq.Expressions.ColumnDeclaration})">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ColumnDeclaration"/>集合。
            </summary>
            <param name="columns">要访问的集合。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor.VisitOrderBy(System.Collections.ObjectModel.ReadOnlyCollection{Fireasy.Data.Entity.Linq.Expressions.OrderExpression})">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.OrderExpression"/>集合。
            </summary>
            <param name="expressions">要访问的表达式集合。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.ExecutionBuilder.BuildExecuteNoQueryCommand(Fireasy.Data.Entity.Linq.Expressions.CommandExpression)">
            <summary>
            构造调用 ExecuteNoQuery 方法的表达式。
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.ExecutionBuilder.BuildExecuteScalarCommand(Fireasy.Data.Entity.Linq.Expressions.CommandExpression)">
            <summary>
            构造调用 ExecuteScalar 方法的表达式。
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.ExecutionBuilder.CreateParameterCollectionExpression(System.Linq.Expressions.Expression)">
            <summary>
            收集嵌套的参数并生成 <see cref="T:Fireasy.Data.ParameterCollection"/> 的表达式。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.ExecutionBuilder.CreateDataRowWrapper(Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            创建 <see cref="T:Fireasy.Data.IDataRowMapper"/>。
            </summary>
            <param name="projection"></param>
            <param name="projector"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.ExecutionBuilder.ConstructEntity(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty[],Fireasy.Data.Entity.PropertyValue[],Fireasy.Data.Entity.IEntityPersistentInstanceContainer,Fireasy.Data.Entity.IEntityPersistentEnvironment)">
            <summary>
            构造实体对象。
            </summary>
            <param name="entity">实体对象。</param>
            <param name="properties">属性数组。</param>
            <param name="values">值数组。</param>
            <param name="instanceContainer"><see cref="T:Fireasy.Data.Entity.IEntityPersistentInstanceContainer"/> 对象。</param>
            <param name="environment"><see cref="T:Fireasy.Data.Entity.IEntityPersistentEnvironment"/> 对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.ExecutionBuilder.GenerateGuidValue(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            使用 Guid 作为主键。
            </summary>
            <param name="entity"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.ExecutionBuilder.GenerateIdentityValue(Fireasy.Data.IDatabase,Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            调用 <see cref="T:Fireasy.Data.Identity.IGeneratorProvider"/> 对象生成标识值。在 VisitGenerator 中使用该方法。
            </summary>
            <param name="database"></param>
            <param name="entity"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.ExecutionBuilder.OuterParameterizer">
            <summary>
            columns referencing the outer alias are turned into special named-value parameters
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.DbExpression">
            <summary>
            一个抽象类，表示 ELinq 自定义表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpression.#ctor(Fireasy.Data.Entity.Linq.Expressions.DbExpressionType)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.DbExpression"/> 类的新实例。
            </summary>
            <param name="nodeType">节点的类型。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DbExpression.#ctor(Fireasy.Data.Entity.Linq.Expressions.DbExpressionType,System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.DbExpression"/> 类的新实例。
            </summary>
            <param name="nodeType">节点的类型。</param>
            <param name="type">表达式的静态类型。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.DbExpression.NodeType">
            <summary>
            获取节点的自定义类型。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.ClientJoinExpression">
            <summary>
            一个表达式，表示客户端的连接查询。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.ClientJoinExpression.#ctor(Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            初始化 
            </summary>
            <param name="projection"></param>
            <param name="outerKey"></param>
            <param name="innerKey"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.ClientJoinExpression.Update(Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ClientJoinExpression"/> 对象。
            </summary>
            <param name="projection"></param>
            <param name="innerKey"></param>
            <param name="outerKey"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.GeneratorExpression">
            <summary>
            表示属性使用 <see cref="!:IGeneratorProvider"/> 作为生成的表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.GeneratorExpression.Table">
            <summary>
            获取关联的 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.TableExpression"/> 对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.GeneratorExpression.Entity">
            <summary>
            获取相关的实体表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.GeneratorExpression.Property">
            <summary>
            获取相关的属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.ILoadedProperty">
            <summary>
            表示可以正常加载（非延迟等）的属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.ISavedProperty">
            <summary>
            表示可以保存的属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.BlockCommandExpression">
            <summary>
            
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.CommandExpression">
            <summary>
            一个抽象类，表示命令类型的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.InsertCommandExpression.#ctor(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.Linq.Expressions.ColumnAssignment})">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.InsertCommandExpression"/> 类的新实例。
            </summary>
            <param name="table">表的表达式。</param>
            <param name="arguments">插入的列表达式集合。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.InsertCommandExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.Linq.Expressions.ColumnAssignment})">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.InsertCommandExpression"/> 对象。
            </summary>
            <param name="table">表的表达式。</param>
            <param name="arguments">插入的列表达式集合。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.InsertCommandExpression.Table">
            <summary>
            获取操作的表的表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.InsertCommandExpression.Assignments">
            <summary>
            获取需要更新的列表达式集合。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.InsertCommandExpression.WithAutoIncrement">
            <summary>
            获取或设置是否使用自增量插入。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.MethodCallBindAttribute">
            <summary>
            提供方法调用的绑定特性。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.MethodCallBindAttribute.#ctor(System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Translators.MethodCallBindAttribute"/> 类的新实例。
            </summary>
            <param name="binderType"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.MethodCallBindAttribute.BinderType">
            <summary>
            获取或设置绑定类。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.TranslateUtils">
            <summary>
            LINQ解析的实用功能。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslateUtils.AddMethodBinder(System.Reflection.MethodInfo,Fireasy.Data.Entity.Linq.Translators.IMethodCallBinder)">
            <summary>
            添加方法调用的绑定。
            </summary>
            <param name="method"></param>
            <param name="binder"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslateUtils.GetMethodBinder(System.Reflection.MethodInfo)">
            <summary>
            获取方法调用的绑定。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ClientJoinedProjectionRewriter">
            <summary>
            rewrites nested projections into client-side joins
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.CrossJoinIsolator">
            <summary>
            Isolates cross joins from other types of joins using nested sub queries
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.CrossJoinRewriter">
            <summary>
            Attempt to rewrite cross joins as inner joins
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.DbExpressionWriter">
            <summary>
            基于 DB 的表达式重写器。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.DbExpressionWriter.Write(System.IO.TextWriter,System.Linq.Expressions.Expression)">
            <summary>
            将表达式树写入到指定的 <see cref="T:System.IO.TextWriter"/> 对象中。
            </summary>
            <param name="writer">一个 <see cref="T:System.IO.TextWriter"/> 对象。</param>
            <param name="expression">要重写的表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.DbExpressionWriter.WriteToString(System.Linq.Expressions.Expression)">
            <summary>
            将表达式树转换为字符串表示。
            </summary>
            <param name="expression">要重写的表达式。</param>
            <returns>表示表达式的字符串。</returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.GroupKeyReplacer">
            <summary>
            如果 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.JoinExpression"/> 表达式中的一边具有 Group 子表，则需要将连接条件中的 Key 表达式替换为相应的 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression"/> 对象。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.IMethodCallBinder">
            <summary>
            提供对方法调用的绑定。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.IMethodCallBinder.Bind(Fireasy.Data.Entity.Linq.Expressions.DbExpressionVisitor,System.Linq.Expressions.MethodCallExpression)">
            <summary>
            使用转换来绑定方法调用。
            </summary>
            <param name="visitor">上下文中的访问器。</param>
            <param name="callExp">当前的方法调用表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.TranslateProviderBase">
            <summary>
            一个抽象类，提供对 ELinq 表达式的翻译。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ITranslateProvider">
            <summary>
            提供对 ELinq 表达式的翻译。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.ITranslateProvider.CreateTranslator">
            <summary>
            创建一个翻译器对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.ITranslateProvider.CreateOptions">
            <summary>
            创建一个默认的解析选项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.ITranslateProvider.Translate(System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Translators.TranslateOptions)">
            <summary>
            对 ELinq 表达式进行翻译，并返回翻译的结果。
            </summary>
            <param name="expression">一个 ELinq 表达式。</param>
            <param name="options">翻译的选项。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.ITranslateProvider.BuildExecutionPlan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Translators.TranslateOptions)">
            <summary>
            构造执行计划表达式。
            </summary>
            <param name="expression"></param>
            <param name="provider"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.ITranslateProvider.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            判断表达式中的常量是否可以被计算。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslateProviderBase.CreateTranslator">
            <summary>
            获取一个 ELinq 翻译器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslateProviderBase.CreateOptions">
            <summary>
            创建一个默认的解析选项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslateProviderBase.Translate(System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Translators.TranslateOptions)">
            <summary>
            对 ELinq 表达式进行翻译，并返回翻译的结果。
            </summary>
            <param name="expression">一个 ELinq 表达式。</param>
            <param name="options">翻译的选项。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslateProviderBase.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            判断表达式中的常量是否可以被计算。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.TranslatorBase">
            <summary>
            一个抽象类，用于将 ELinq 表达式翻译为 SQL 语句。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.IsNested">
            <summary>
            获取或设置是否嵌套查询。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Translators.TranslatorBase"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.Translate(System.Linq.Expressions.Expression)">
            <summary>
            执行表达式的翻译。
            </summary>
            <param name="expression">查询表达式。</param>
            <returns>翻译结果对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.TranslateString(System.Linq.Expressions.Expression)">
            <summary>
            将表达式翻译成字符串。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.ToString">
            <summary>
            输出翻译的查询SQL。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.WriteLine(Fireasy.Data.Entity.Linq.Translators.Indentation)">
            <summary>
            向构造器中添加新行。
            </summary>
            <param name="style">缩进样式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.Write(System.Object)">
            <summary>
            向构造器中添加值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.SetIndentation(Fireasy.Data.Entity.Linq.Translators.Indentation)">
            <summary>
            控制构造器的缩进
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            对条件的翻译。
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.VisitJoin(Fireasy.Data.Entity.Linq.Expressions.JoinExpression)">
            <summary>
            对JOIN子句的翻译。
            </summary>
            <param name="join"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.VisitExists(Fireasy.Data.Entity.Linq.Expressions.ExistsExpression)">
            <summary>
            对EXISTS子查询的翻译。
            </summary>
            <param name="exists"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.GetAliasName(Fireasy.Data.Entity.Linq.Expressions.TableAlias)">
            <summary>
            获取表的别名。
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.GetAggregateName(Fireasy.Data.Entity.Linq.Expressions.AggregateType)">
            <summary>
            获取聚合函数的名称。
            </summary>
            <param name="aggregateType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.RequiresAsteriskWhenNoArgument(Fireasy.Data.Entity.Linq.Expressions.AggregateType)">
            <summary>
            判断是否为不带参数的COUNT聚合函数。
            </summary>
            <param name="aggregateType"></param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.Options">
            <summary>
            获取或设置翻译器的选项。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.Parameters">
            <summary>
            获取参数集合。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslatorBase.Environment">
            <summary>
            获取或设置持久化环境。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.Parameterizer">
            <summary>
            Converts user arguments into named-value parameters
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ReferencedColumnGatherer">
            <summary>
            Gathers all columns referenced by the given expression
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.RelationshipIncluder">
            <summary>
            Adds relationship to query results depending on policy
            </summary>
        </member>
        <!-- 对于成员“T:Fireasy.Data.Entity.Linq.Translators.SkipToNestedOrderByRewriter”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:Fireasy.Data.Entity.Linq.Translators.ThreeTopPagerRewriter”忽略有格式错误的 XML 注释 -->
        <member name="T:Fireasy.Data.Entity.Properties.IPropertyLazy">
            <summary>
            标记可延迟加载的属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.SubqueryProperty">
            <summary>
            表示带有子查询的实体属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IProperty">
            <summary>
            用于描述实体属性的信息。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IProperty.Name">
            <summary>
            获取或设置属性的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IProperty.Type">
            <summary>
            获取或设置属性的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IProperty.EntityType">
            <summary>
            获取或设置实体类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IProperty.Info">
            <summary>
            获取或设置属性的映射信息。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.SubqueryProperty.Name">
            <summary>
            获取或设置属性的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.SubqueryProperty.Type">
            <summary>
            获取或设置属性的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.SubqueryProperty.EntityType">
            <summary>
            获取或设置实体类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.SubqueryProperty.Info">
            <summary>
            获取或设置属性的映射信息。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.SubqueryProperty.Subquery">
            <summary>
            获取子查询语句，使用符号 $ 来表示实体类型的别名。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.CachableChecker">
            <summary>
            用于检查 ELinq 表达式树能否被缓存。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.CachableChecker.Check(System.Linq.Expressions.Expression)">
            <summary>
            检查表达式是否可以被缓存。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ColumnMapper">
            <summary>
            Rewrite all column references to one or more aliases to a new single alias
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.QueryDuplicator">
            <summary>
            Duplicate the query expression by making a copy with new table aliases
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.IPropertyLazyLoadder">
            <summary>
            提供对属性的延迟加载。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.IPropertyLazyLoadder.GetValue(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            获取实体对象中指定属性的值。
            </summary>
            <param name="entity">当前访问的实体对象。</param>
            <param name="property">要加载的属性。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.PrimaryPropertyUpdateException">
            <summary>
            对于已经持久化的实体对象，在修改其主要属性时将引发此异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PrimaryPropertyUpdateException.#ctor(Fireasy.Data.Entity.IProperty)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.PrimaryPropertyUpdateException"/> 类的新实例。
            </summary>
            <param name="property">指定引发修改异常的主要属性。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.PrimaryPropertyUpdateException.Property">
            <summary>
            获取引发修改异常的主要属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.IPropertyReference">
            <summary>
            表示对其他属性的引用。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.PropertyLazyLoadderAttribute">
            <summary>
            定义属性的延迟加载的 <see cref="T:Fireasy.Data.Entity.Properties.IPropertyLazyLoadder"/> 接口。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.PropertyLazyLoadderAttribute.#ctor(System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Properties.PropertyLazyLoadderAttribute"/> 类的新实例。
            </summary>
            <param name="loadderType"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.PropertyLazyLoadderAttribute.LoadderType">
            <summary>
            获取或设置实现延迟加载的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.PropertyLazyLoadderBase">
            <summary>
            属性延迟加载的抽象类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.PropertyLazyLoadderBase.GetValue(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            获取实体中指定属性的值。
            </summary>
            <param name="entity">当前的实体对象。</param>
            <param name="property">要获取值的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.PropertyLazyLoadderBase.GetEnvironment(Fireasy.Data.Entity.IEntity)">
            <summary>
            获取实例上的 <see cref="T:Fireasy.Data.Entity.EntityPersistentEnvironment"/> 实例。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.PropertyLazyLoadderBase.GetInstanceName(Fireasy.Data.Entity.IEntity,System.Type)">
            <summary>
            从实体中取出 InstanceName，前提是实体实现了 <see cref="T:Fireasy.Data.Entity.IEntityPersistentInstanceContainer"/> 接口。
            </summary>
            <param name="entity"></param>
            <param name="relationType"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.VirtualProperty">
            <summary>
            一个虚构的属性，不参与持久化。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.VirtualProperty.#ctor(System.String,System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Properties.VirtualProperty"/> 类的新实例。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <param name="propertyType">属性的类型。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.VirtualProperty.ToString">
            <summary>
            输出列名称。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.VirtualProperty.Name">
            <summary>
            获取或设置属性的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.VirtualProperty.Type">
            <summary>
            获取或设置属性的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.VirtualProperty.EntityType">
            <summary>
            获取或设置实体类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.VirtualProperty.Info">
            <summary>
            获取或设置属性的映射信息。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyMappingAttribute">
            <summary>
            一个标识实体如何与数据表进行映射的特性。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyMappingAttribute.#ctor">
            <summary>
            初始化类 <see cref="T:Fireasy.Data.Entity.PropertyMappingAttribute"/> 的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyMappingAttribute.#ctor(System.String)">
            <summary>
            初始化类 <see cref="T:Fireasy.Data.Entity.PropertyMappingAttribute"/> 的新实例。
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.ColumnName">
            <summary>
            获取或设置列名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.Description">
            <summary>
            获取或设置列的注释。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.DataType">
            <summary>
            获取或设置列的数据类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.DefaultValue">
            <summary>
            获取或设置默认值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.Length">
            <summary>
            获取或设置列的最大长度。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.Precision">
            <summary>
            获取或设置数值型列的精度。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.Scale">
            <summary>
            获取或设置数值型列的小数位数。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.GenerateType">
            <summary>
            获取或设置列的自动生成类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.IsPrimaryKey">
            <summary>
            获取或设置是否为主键。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.IsNullable">
            <summary>
            获取或设置是否可为空。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.IsDeletedKey">
            <summary>
            获取或设置是否为假删除标识。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMappingAttribute.LoadBehavior">
            <summary>
            获取或设置关系型属性的加载行为。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityMappingAttribute">
            <summary>
            一个标识实体如何与数据表进行映射的特性。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityMappingAttribute.#ctor(System.String)">
            <summary>
            使用数据表名称初始化 <see cref="T:Fireasy.Data.Entity.EntityMappingAttribute"/> 类的新实例。
            </summary>
            <param name="tableName">表的名称。</param>
            <param name="instanceName">数据库实例的名称。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityMappingAttribute.TableName">
            <summary>
            获取或设置实例映射的数据表名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityMappingAttribute.Description">
            <summary>
            获取或设置表的注释。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityObjectReader`1">
            <summary>
            提供对指定类型的实体进行值读取的方法。无法继承此类。
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObjectReader`1.ReadValues(`0)">
            <summary>
            读取实体实例的所有值。
            </summary>
            <param name="instance">要读取的实体实例。</param>
            <returns>所有属性的值。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObjectReader`1.ReadValue(`0,System.String)">
            <summary>
            获取指定属性的值。
            </summary>
            <param name="instance">要读取的实体实例。</param>
            <param name="propertyName">要读取的属性的名称。</param>
            <returns>指定属性的值。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityObjectReader`1.GetCanReadProperties">
            <summary>
            获取可以读取值的属性名称序列。
            </summary>
            <returns>所有可以读取值的属性名称序列。</returns>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityPersistentEnvironment">
            <summary>
            实体持久化的环境。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersistentEnvironment.AddVariable(System.String,System.Object)">
            <summary>
            添加一个环境变量，如果当前环境中已经存在该变量名称，则使用新值进行替换。
            </summary>
            <remarks>
            如果实体类使用了 <see cref="T:Fireasy.Data.Entity.EntityVariableAttribute"/> 标记，则该变量名称应包含在 TableName 中。
            </remarks>
            <param name="name">变量名称。</param>
            <param name="value">变量的值。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersistentEnvironment.RemoveVariable(System.String)">
            <summary>
            移除指定的环境变量。
            </summary>
            <param name="name">变量名称。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersistentEnvironment.GetVariableTableName(System.Type)">
            <summary>
            使用所添加的变量解析实体映射的数据表名称。
            </summary>
            <param name="entityType">实体类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersistentEnvironment.GetVariableTableName(System.Type,Fireasy.Data.Entity.IEntity)">
            <summary>
            使用所添加的变量解析实体映射的数据表名称。
            </summary>
            <param name="entityType">实体类型。</param>
            <param name="entity">当前实体</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersistentEnvironment.GetVariableTableName(Fireasy.Data.Entity.Metadata.EntityMetadata)">
            <summary>
            使用所添加的变量解析实体映射的数据表名称。
            </summary>
            <param name="metadata">实体元数据。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityPersistentException">
            <summary>
            实例持久化时引发的异常。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersistentException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityPersistentException"/> 类的新实例。
            </summary>
            <param name="message">指定此异常的信息。</param>
            <param name="exception">内联的 <see cref="T:System.Exception"/> 信息。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTransactionScope">
            <summary>
            实体持久化工作区，为持久化对象提供环境事务的支持。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTransactionScope.#ctor(Fireasy.Data.Entity.EntityTransactionScopeOption)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTransactionScope"/> 类的新实例。
            </summary>
            <param name="option">选项。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTransactionScope.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTransactionScope.Complete">
            <summary>
            提交当前工作区内数据的改动。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTransactionScope.Rollback">
            <summary>
            撤销当前工作区内数据的改动。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTransactionScope.SetDatabase(System.String,Fireasy.Data.IDatabase)">
            <summary>
            设置当前持久化工作区内的 <see cref="T:Fireasy.Data.IDatabase"/> 对象。
            </summary>
            <param name="instanceName"></param>
            <param name="database"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTransactionScope.GetDatabase(System.String)">
            <summary>
            返回当前持久化工作区内的 <see cref="T:Fireasy.Data.IDatabase"/> 对象。
            </summary>
            <param name="instanceName"></param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTransactionScope.Option">
            <summary>
            获取或设置持久化工作区的选项。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityPersister`1">
            <summary>
            提供实体的数据持久化支持。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.#ctor(System.String)">
            <summary>
            使用实例名初始化 <see cref="T:Fireasy.Data.Entity.EntityPersister`1"/> 类的新实例。
            </summary>
            <param name="instanceName">实例名。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.#ctor(Fireasy.Data.IDatabase)">
            <summary>
            使用 <see cref="T:Fireasy.Data.IDatabase"/> 对象初始化 <see cref="T:Fireasy.Data.Entity.EntityPersister`1"/> 类的新实例。
            </summary>
            <param name="database">一个 <see cref="T:Fireasy.Data.IDatabase"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.GetEntityType">
            <summary>
            获取实体类型。
            </summary>
            <returns>持久化所操作的实体类型。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Create(`0)">
            <summary>
            将一个新的实体对象创建到库。
            </summary>
            <param name="entity">要创建的实体对象。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.BatchCreate(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Action{System.Int32})">
            <summary>
            批量将一组实体对象创建到库中。
            </summary>
            <param name="entities">一组要插入实体对象。</param>
            <param name="batchSize">每一个批次写入的实体数量。默认为 1000。</param>
            <param name="completePercentage">已完成百分比的通知方法。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Save(`0)">
            <summary>
            将实体对象的改动保存到库。
            </summary>
            <param name="entity">要保存的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Save(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将一组实体对象的更改保存到库。不会更新实体的其他引用属性。
            </summary>
            <param name="entities">要保存的实体序列。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个参照的实体对象更新满足条件的一序列对象。
            </summary>
            <param name="entity">保存的参考对象。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> 参数为 null。</exception>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Update(System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用一个累加器更新满足条件的一序列对象。
            </summary>
            <param name="accumulator">一个累加器表达式。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Update(`0)">
            <summary>
            更新实体对象的修改。
            </summary>
            <param name="entity">要更新的实体对象。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Remove(`0,System.Boolean)">
            <summary>
            将指定的实体对象从库中移除。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <param name="fake">如果具有 IsDeletedKey 属性，则提供对数据假删除的支持。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Remove(System.Object[],System.Boolean)">
            <summary>
            根据主键值将对象从库中移除。
            </summary>
            <param name="primaryValues">主键的值。数组的长度必须与实体所定义的主键相匹配。</param>
            <param name="fake">如果具有 IsDeletedKey 属性，则提供对对象假删除的支持。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="primaryValues"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            将满足条件的一组对象从库中移除。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <param name="fake">如果具有 IsDeletedKey 的属性，则提供对对象假删除的支持。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            返回满足条件的一组实体对象。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>一个实体查询集。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            返回满足条件的一组对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>一个实体查询集。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Query``1(Fireasy.Data.IQueryCommand,Fireasy.Data.IDataSegment,Fireasy.Data.ParameterCollection)">
            <summary>
            根据自定义的SQL语句查询返回一组对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="queryCommand">查询命令。</param>
            <param name="segment">数据分段对象。</param>
            <param name="parameters">查询参数集合。</param>
            <returns><typeparamref name="T"/> 类型的对象枚举器。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Query(Fireasy.Data.IQueryCommand,Fireasy.Data.IDataSegment,Fireasy.Data.ParameterCollection)">
            <summary>
            根据自定义的SQL语句查询返回一组动态对象。
            </summary>
            <param name="queryCommand">查询命令。</param>
            <param name="segment">数据分段对象。</param>
            <param name="parameters">查询参数集合。</param>
            <returns>一个动态类型的对象枚举器。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Query(System.String,System.String,Fireasy.Data.IDataSegment,Fireasy.Data.ParameterCollection)">
            <summary>
            返回满足条件的一组实体对象。
            </summary>
            <param name="condition">一般的条件语句。</param>
            <param name="orderBy">排序语句。</param>
            <param name="segment">数据分段对象。</param>
            <param name="parameters">查询参数集合。</param>
            <returns>当前类型的实体枚举器。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.First(System.Object[])">
            <summary>
            使用主键值查询返回一个实体。
            </summary>
            <param name="primaryValues">主键的值。数组的长度必须与实体所定义的主键相匹配。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="primaryValues"/> 参数为 null。</exception>
            <returns>一个实体对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            指定要包括在查询结果中的关联对象。
            </summary>
            <param name="fnMember">要包含的属性的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Associate(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.IEnumerable}})">
            <summary>
            对关联对象的查询采用指定的谓语。
            </summary>
            <param name="memberQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityPersister`1.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityPersister`1.Provider">
            <summary>
            获取 <see cref="T:System.Linq.IQueryProvider"/> 对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityPersister`1.Database">
            <summary>
            获取当前所使用的 <see cref="T:Fireasy.Data.IDatabase"/> 对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityPersister`1.Environment">
            <summary>
            获取或设置持久化环境。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.EntityProperty">
            <summary>
            引用自其他实体对象的属性。无法继承此类。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.RelationProperty">
            <summary>
            关系型属性，该属性不属于数据结构的范围，而是一类由实体关系所衍生的辅助属性。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.RelationProperty.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Properties.RelationProperty"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.RelationProperty.#ctor(Fireasy.Data.Entity.Properties.RelationPropertyType)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Properties.RelationProperty"/> 类的新实例。
            </summary>
            <param name="relationType"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.RelationProperty.Name">
            <summary>
            获取或设置属性的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.RelationProperty.Type">
            <summary>
            获取或设置属性的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.RelationProperty.EntityType">
            <summary>
            获取或设置实体类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.RelationProperty.Info">
            <summary>
            获取或设置属性的映射信息。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.RelationProperty.RelationType">
            <summary>
            获取或设置关联的实体类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.RelationProperty.RelationPropertyType">
            <summary>
            获取关联属性类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.RelationProperty.Options">
            <summary>
            获取或设置关联选项。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.EntityProperty.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Properties.EntityProperty"/> 类的新实例。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityRowMapper`1">
            <summary>
            一个用于将数据行转换为实体的映射器。无法继承此类。
            </summary>
            <typeparam name="T">要转换的实体类型。</typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRowMapper`1.Map(System.Data.IDataReader)">
            <summary>
            将一个 <see cref="T:System.Data.IDataReader"/> 转换为一个 <typeparamref name="T"/> 的对象。
            </summary>
            <param name="reader">一个 <see cref="T:System.Data.IDataReader"/> 对象。</param>
            <returns>由当前 <see cref="T:System.Data.IDataReader"/> 对象中的数据转换成的 <typeparamref name="T"/> 对象实例。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityRowMapper`1.Map(System.Data.DataRow)">
            <summary>
            将一个 <see cref="T:System.Data.DataRow"/> 转换为一个 <typeparamref name="T"/> 的对象。
            </summary>
            <param name="row">一个 <see cref="T:System.Data.DataRow"/> 对象。</param>
            <returns>由 <see cref="T:System.Data.DataRow"/> 中数据转换成的 <typeparamref name="T"/> 对象实例。</returns>
        </member>
        <member name="T:Fireasy.Data.Entity.EntitySet`1">
            <summary>
            一个实体对象的集合。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
        </member>
        <member name="T:Fireasy.Data.Entity.IEntitySet">
            <summary>
            实体集的相关方法。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.IEntitySet.Owner">
            <summary>
            获取或设置所属的实体对象。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntitySet`1"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            使用一个 <typeparamref name="TEntity"/> 序列初始化 <see cref="T:Fireasy.Data.Entity.EntitySet`1"/> 类的新实例。
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            使用一个枚举器初始化 <see cref="T:Fireasy.Data.Entity.EntitySet`1"/> 类的新实例。
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.Add(`0)">
            <summary>
            添加一个实体对象到集合中。
            </summary>
            <param name="entity">要添加的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.Clear">
            <summary>
            移除集合中的所有实体。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.Contains(`0)">
            <summary>
            判断实体是否在集合中。
            </summary>
            <param name="entity">要查找的实体对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            将集合中的所有实体复制到数组中。
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.Remove(`0)">
            <summary>
            从集合中移除指定的实体对象。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.IndexOf(`0)">
            <summary>
            返回指定实体在集合中从零开始的索引位置。
            </summary>
            <param name="entity">要查找的实体对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.Insert(System.Int32,`0)">
            <summary>
            将实体对象插入到集合中的指定位置。
            </summary>
            <param name="index">插入的位置。</param>
            <param name="entity">要插入的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.RemoveAt(System.Int32)">
            <summary>
            移除指定位置的实体对象。
            </summary>
            <param name="index">要移除的位置。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.GetEnumerator">
            <summary>
            返回循环返回实体的枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntitySet`1.Clone">
            <summary>
            克隆一个对象。
            </summary>
            <returns>新的对象。</returns>
        </member>
        <member name="P:Fireasy.Data.Entity.EntitySet`1.Count">
            <summary>
            获取集合中实体的个数。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntitySet`1.IsReadOnly">
            <summary>
            获取集合是否只读。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntitySet`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的实体对象。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.EntitySet`1.Fireasy#Data#Entity#IEntitySet#Owner">
            <summary>
            获取或设置集合所属的实体对象。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.EntitySetProperty">
            <summary>
            引用自一个子实体集合的属性。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.EntitySetProperty.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Properties.EntitySetProperty"/> 类的新实例。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityState">
            <summary>
            实体的状态。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityState.Unchanged">
            <summary>
            实体未被修改。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityState.Attached">
            <summary>
            已添加到数据集中，但还未保存到库。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityState.Detached">
            <summary>
            已从数据集中移除，但还未从库中删除。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityState.Modified">
            <summary>
            该实体的某项属性已被修改。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreeFieldTypeException">
            <summary>
            使用 <see cref="T:Fireasy.Data.Entity.EntityTreeMappingAttribute"/> 建立树映射关系时，如果其中属性定义的类型不满足实体树持久要求时，将引发此异常。
            比如属性 Level、Order 只接受 <see cref="T:System.Int32"/> 类型的支持。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreeFieldTypeException.#ctor(System.Type,Fireasy.Data.Entity.IProperty,System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreeFieldTypeException"/> 类的新实例。
            </summary>
            <param name="entityType">实体的类型。</param>
            <param name="property">用于标记树映射关系的实体属性。</param>
            <param name="requiredType">属性所需的类型。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeFieldTypeException.EntityType">
            <summary>
            获取实体的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeFieldTypeException.Property">
            <summary>
            获取用于标记树映射关系的实体属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeFieldTypeException.RequiredType">
            <summary>
            获取所需的属性的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreeMappingAttribute">
            <summary>
            一个标识实体支持树型结构所需属性映射的特性。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreeMappingAttribute.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreeMappingAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeMappingAttribute.InnerSign">
            <summary>
            获取或设置内部标记(必须的)。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeMappingAttribute.Level">
            <summary>
            获取或设置级别(必须的)。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeMappingAttribute.Order">
            <summary>
            获取或设置排序(必须的)。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeMappingAttribute.Name">
            <summary>
            获取或设置名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeMappingAttribute.FullName">
            <summary>
            获取或设置全名。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeMappingAttribute.NameSeparator">
            <summary>
            获取或设置全名的名称分隔符。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeMappingAttribute.SignLength">
            <summary>
            获取或设置标记的长度，默认为4位。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreeUpdatingBag">
            <summary>
            实体树的节点数据。无法继承此类。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingBag.InnerId">
            <summary>
            获取内码值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingBag.Level">
            <summary>
            获取级别值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingBag.Order">
            <summary>
            获取排序值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingBag.Name">
            <summary>
            获取名称值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingBag.FullName">
            <summary>
            获取全名值。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreePersistentException">
            <summary>
            实体树持久化时引发的异常。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersistentException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreePersistentException"/> 类的新实例。
            </summary>
            <param name="message">指定此异常的信息。</param>
            <param name="exception">内联的 <see cref="T:System.Exception"/> 信息。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreePersister`1">
            <summary>
            为实体树提供一组特殊的数据持久化方法。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreePersister`1"/> 类的新实例。
            </summary>
            <param name="instanceName">实例名。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.#ctor(Fireasy.Data.IDatabase)">
            <summary>
            使用 <see cref="T:Fireasy.Data.IDatabase"/> 对象初始化 <see cref="T:Fireasy.Data.Entity.EntityTreePersister`1"/> 类的新实例。
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.Create(`0)">
            <summary>
            将一个新的 <typeparamref name="TEntity"/> 对象持久化。
            </summary>
            <param name="entity">要持久化的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.Update(`0)">
            <summary>
            更新实体对象的修改。如果已经定义了 FullName 则会更新当前对象及相关的子实体对象 的 FullName 属性。
            </summary>
            <param name="entity">要更新的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.Insert(`0,`0,Fireasy.Data.Entity.EntityTreePosition)">
            <summary>
            将一个实体插入到参照实体的相应位置。
            </summary>
            <param name="entity">插入的实体。</param>
            <param name="referEntity">参照的实体。</param>
            <param name="position">插入的位置。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.Move(`0,`0,System.Nullable{Fireasy.Data.Entity.EntityTreePosition})">
            <summary>
            将一个实体移动到参照实体的相应位置。
            </summary>
            <param name="entity">要移动的实体。</param>
            <param name="referEntity">参照的实体。</param>
            <param name="position">移动的位置。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.Remove(`0,System.Boolean)">
            <summary>
            将指定的实体对象从库中移除。
            </summary>
            <param name="entity">要移除的实体对象。</param>
            <param name="fake">如果具有 IsDeletedKey 属性，则提供对数据假删除的支持。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.Swap(`0,`0)">
            <summary>
            将两个实体的位置进行交换，且相关的子实体也跟随移动。
            </summary>
            <param name="entityA">要交换的实体A。</param>
            <param name="entityB">要交换的实体B。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.ShiftUp(`0)">
            <summary>
            将实体在同一层级上进行上移。
            </summary>
            <param name="entity">要移动的实体。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.ShiftDown(`0)">
            <summary>
            将实体在同一层级上进行下移。
            </summary>
            <param name="entity">要移动的实体。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.IsParental(`0,`0)">
            <summary>
            判断两个实体是否具有直属关系。
            </summary>
            <param name="entityA">实体A。</param>
            <param name="entityB">实体B。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.GetPaternalPosition(`0,`0)">
            <summary>
            判断两个实体的父子身份。
            </summary>
            <param name="entityA">实体A。</param>
            <param name="entityB">实体B。</param>
            <returns>如果两个实体没有父子关系，则为 0，如果 entityA 是 entityB 的长辈，则为 1，反之为 -1。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.IsBrotherly(`0,`0)">
            <summary>
            判断两个实体是否具有兄弟关系。
            </summary>
            <param name="entityA">实体A。</param>
            <param name="entityB">实体B。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.HasChildren(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断实体是否具有孩子。
            </summary>
            <param name="entity">当前实体。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.QueryChildren(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            查询指定实体的孩子。
            </summary>
            <param name="entity">当前实体。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <param name="recurrence">是否递归出所有孩子。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.RecurrenceParent(`0)">
            <summary>
            递归返回实体的父亲实体。
            </summary>
            <param name="entity">当前实体。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.GetPreviousSibling(`0)">
            <summary>
            获取上一个兄弟。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreePersister`1.GetNextSibling(`0)">
            <summary>
            获取下一个兄弟。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="E:Fireasy.Data.Entity.EntityTreePersister`1.EntityTreeUpdating">
            <summary>
            实体树更新时通知客户端程序。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreePosition">
            <summary>
            实体节点的参照位置。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityTreePosition.Before">
            <summary>
            参考实体之前。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityTreePosition.After">
            <summary>
            参考实体之后。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityTreePosition.Children">
            <summary>
            参考实体的孩子。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreeRequiredFieldException">
            <summary>
            使用 <see cref="T:Fireasy.Data.Entity.EntityTreeMappingAttribute"/> 建立树映射关系时，如果缺少必要的属性时，将引发此异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreeRequiredFieldException.#ctor(System.Type,System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreeRequiredFieldException"/> 类的新实例。
            </summary>
            <param name="entityType">实体的类型。</param>
            <param name="propertyName">所需的属性。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeRequiredFieldException.EntityType">
            <summary>
            获取实体的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeRequiredFieldException.PropertyName">
            <summary>
            获取所需的属性名称。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreeUpdatingAction">
            <summary>
            实体树更新的动作类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityTreeUpdatingAction.Move">
            <summary>
            当前节点移动到目标节点的相应位置。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityTreeUpdatingAction.Remove">
            <summary>
            当前节点被移除。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.EntityTreeUpdatingAction.Rename">
            <summary>
            当前节点的名称被改变。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs">
            <summary>
            实体树更新时包含的相关数据。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs.#ctor(Fireasy.Data.Entity.IEntity)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs"></see> 类的新实例。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs.Current">
            <summary>
            获取当前更新的实体。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs.OldValue">
            <summary>
            获取实体更新前的相关值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs.NewValue">
            <summary>
            获取实体更新后的相关值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs.Action">
            <summary>
            获取更新的动作类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs.Cancel">
            <summary>
            获取或设置是否取消当前的更新操作。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs`1">
            <summary>
            实体树更新时包含的相关数据。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs`1.#ctor(`0)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs`1"></see> 类的新实例。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs`1.#ctor(Fireasy.Data.Entity.EntityTreeUpdatingEventArgs)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs`1"></see> 类的新实例。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs`1.Update``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用一个参照的实体对象更新满足条件的一序列对象。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <param name="entity">保存的参考对象。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs`1.Remove``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            将满足条件的一组对象从库中移除。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <param name="fake">如果具有 IsDeletedKey 的属性，则提供对数据假删除的支持。</param>
            <returns>影响的实体数。</returns>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityTreeUpdatingEventArgs`1.Current">
            <summary>
            获取当前更新的实体。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreeUpdatingEventHandler`1">
            <summary>
            实体树更新时的通知方法。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="persister"></param>
            <param name="e">当前更新的实体的相关数据。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityTreeUpdatingEventHandler">
            <summary>
            实体树更新时的通知方法。
            </summary>
            <param name="e">当前更新的实体的相关数据。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityEntry">
            <summary>
            用于记录实体的属性的数据。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntry.Reset">
            <summary>
            重置修改状态。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntry.Modify(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            使用指定的值进行修改。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntry.GetCurrentValue">
            <summary>
            获取当前值。如果正在修改，则返回新值，否则为旧值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntry.GetOldValue">
            <summary>
            获取旧值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntry.Initializate(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            初始化，设置旧值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntry.InitByOldValue(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            使用旧值初始化一个 <see cref="T:Fireasy.Data.Entity.EntityEntry"/>。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntry.InitByNewValue(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            使用新值初始化一个 <see cref="T:Fireasy.Data.Entity.EntityEntry"/>。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityEntry.IsModified">
            <summary>
            获取或设置实体值是否已修改。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityEntryDictionary">
            <summary>
            用于保存实体的属性值的字典。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntryDictionary.Reset">
            <summary>
            重置所有属性的修改状态。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntryDictionary.GetModifiedProperties">
            <summary>
            获取被修改过的所有属性的名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntryDictionary.Has(System.String)">
            <summary>
            判断指定的属性是否有值。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntryDictionary.Initializate(System.String,Fireasy.Data.Entity.PropertyValue,System.Action)">
            <summary>
            初始化属性的值。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <param name="value">要设置的值。</param>
            <param name="addAction">如果在此之前没有设置值，则通过此方法回调。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntryDictionary.Modify(System.String,Fireasy.Data.Entity.PropertyValue,System.Action)">
            <summary>
            修改属性的值。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <param name="value">要设置的值。</param>
            <param name="addAction">如果在此之前没有设置值，则通过此方法回调。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityEntryDictionary.GetEnumerator">
            <summary>
            返回循环返回此字典的枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityEntryDictionary.Item(System.String)">
            <summary>
            索引器，返回指定属性名的属性值。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyValue">
            <summary>
            使属性能够存储各种类型的值，而不需要进行装箱或拆箱。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.#ctor(Fireasy.Data.Entity.StorageType)">
            <summary>
            使用空值初始化 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.New(System.Object,System.Type)">
            <summary>
            使用 object 数据构造一个 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 对象。
            </summary>
            <param name="value"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Char)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Char"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Char">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Char"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Char})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Char}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Boolean)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Boolean"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Boolean">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Boolean"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Boolean})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Boolean}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Byte)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Byte"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Byte">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Byte"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Byte})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Byte}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Byte[])~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Byte"/> 数组类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Byte[]">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Byte"/> 数组类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.DateTime)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.DateTime"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.DateTime">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.DateTime"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.DateTime})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.DateTime}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Decimal)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Decimal"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Decimal">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Decimal"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Decimal})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Decimal}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Double)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Double"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Double">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Double"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Double})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Double}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Guid)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Guid"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Guid">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Guid"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Guid})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Guid}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Int32)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Int32"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Int32">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Int32"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Int32})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Int32}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Int16)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Int16"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Int16">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Int16"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Int16})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Int16}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Int64)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Int64"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Int64">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Int64"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Int64})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Int64}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Single)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Single"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Single">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Single"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.Single})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.Single}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.String)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.String"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.String">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.String"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.TimeSpan)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.TimeSpan"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.TimeSpan">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.TimeSpan"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Nullable{System.TimeSpan})~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="T:System.Nullable`1"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Nullable{System.TimeSpan}">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="T:System.Nullable`1"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Implicit(System.Enum)~Fireasy.Data.Entity.PropertyValue">
            <summary>
            将 <see cref="P:Fireasy.Data.Entity.PropertyValue.Enum"/> 类型隐式转换为 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.op_Explicit(Fireasy.Data.Entity.PropertyValue)~System.Enum">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型显示转换为 <see cref="P:Fireasy.Data.Entity.PropertyValue.Enum"/> 类型。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.Correct(System.Type)">
            <summary>
            纠正存储值的类型。
            </summary>
            <param name="correctType">要纠正的实际存储的类型。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.GetStorageValue">
            <summary>
            获取实际存储的值，转换为 <see cref="T:System.Object"/> 表示。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.Equals(System.Object)">
            <summary>
            判断是否与指定的属性值相等。
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.GetHashCode">
            <summary>
            获取属性值的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.Clone">
            <summary>
            克隆该对象副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.ToString">
            <summary>
            使用字符串表示该属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.IsNullOrEmpty(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            判断指定的值是否为空。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValue.GetValue(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            获取指定 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 真实的值。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyValue.StorageType">
            <summary>
            获取存储数据的实际类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyValue.IsEmpty">
            <summary>
            获取该对象是否为空。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyValue.IsValid">
            <summary>
            获取该对象是否有效，即数字不为 0、字符串不为空字符时有效。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.StorageType">
            <summary>
            存储数据的类别。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Empty">
            <summary>
            空的，没有存储数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Char">
            <summary>
            System.Char 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Enum">
            <summary>
            System.Enum 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Boolean">
            <summary>
            System.Boolean 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Byte">
            <summary>
            System.Byte 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.ByteArray">
            <summary>
            System.Byte[] 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.DateTime">
            <summary>
            System.DateTime 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Decimal">
            <summary>
            System.Decimal 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Double">
            <summary>
            System.Double 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Guid">
            <summary>
            System.Guid 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Int16">
            <summary>
            System.Int16 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Int32">
            <summary>
            System.Int32 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Int64">
            <summary>
            System.Int64 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Single">
            <summary>
            System.Single 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.String">
            <summary>
            System.String 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.TimeSpan">
            <summary>
            System.TimeSpan 类型的数据。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.StorageType.Object">
            <summary>
            System.Object 类型的数据。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyValueHelper">
            <summary>
            属性值的辅助类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValueHelper.IsSupportedType(System.Type)">
            <summary>
            判断指定的类型是否受 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 类型支持。这些类型主要是值类型。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValueHelper.GetValue``1(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            将 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 的值转换为 <typeparamref name="T"/> 类型。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">一个 <see cref="T:Fireasy.Data.Entity.PropertyValue"/> 对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValueHelper.GetGuidValue``1(Fireasy.Data.Entity.PropertyValue)">
            <summary>
            转换为 <see cref="T:System.Guid"/>，<see cref="T:System.Guid"/> 无法强制转换。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValueHelper.NewValue``1(``0)">
            <summary>
            使用一个值构造一个 <see cref="T:Fireasy.Data.Entity.PropertyValue"/>。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValueHelper.NewValue(System.Object,System.Type)">
            <summary>
            使用一个值构造一个 <see cref="T:Fireasy.Data.Entity.PropertyValue"/>。
            </summary>
            <param name="value"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyValueHelper.Set(Fireasy.Data.Entity.PropertyValue,Fireasy.Data.Parameter)">
            <summary>
            根据指定的<see cref="T:Fireasy.Data.Entity.PropertyValue"/> 来设置 <see cref="T:Fireasy.Data.Parameter"/> 的值。
            </summary>
            <param name="value"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityVariableAttribute">
            <summary>
            一个标识实体变量的特性。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityVariableAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.EntityVariableAttribute"/> 类的新实例。
            </summary>
            <param name="expression"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.EntityVariableAttribute.Expression">
            <summary>
            获取或设置具有变量的表的名称表达式。格式如 TABLE_&lt;VarName1&gt;_&lt;VarName2&gt;。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.EnumProperty">
            <summary>
            引用一个枚举类型的文本说明的属性。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.EnumProperty.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Properties.EnumProperty"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.EnumProperty.Reference">
            <summary>
            获取或设置参照属性，该属性应该是枚举类型的属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.EntityExtension">
            <summary>
            实体的一些扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.Lazyload(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            为实体加载指定的具有延迟行为的属性的值，该属性为 <see cref="T:Fireasy.Data.Entity.Properties.RelationProperty"/> 的子类，且 <see cref="T:Fireasy.Data.Entity.LoadBehavior"/> 属性应设置为 <see cref="F:Fireasy.Data.Entity.LoadBehavior.Lazy"/>。
            </summary>
            <param name="entity">当前的实体对象。</param>
            <param name="property">要进行加载的属性。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.GetModifiedProperties(Fireasy.Data.Entity.IEntity)">
            <summary>
            获取实体被修改的属性列表。
            </summary>
            <param name="entity">当前的实体对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.GetOldValue(Fireasy.Data.Entity.IEntity,System.String)">
            <summary>
            获取实体指定属性修改前的值。
            </summary>
            <param name="entity">当前的实体对象。</param>
            <param name="propertyName">属性名称。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.Construct(Fireasy.Data.Entity.IEntity)">
            <summary>
            使用指定的实体的属性集来构造一个 <see cref="T:System.Data.DataTable"/>，<see cref="T:System.Data.DataTable"/> 里的列与实体属性一一对应。
            </summary>
            <param name="entity">当前的实体对象。</param>
            <returns>一个包含实体结构的空 <see cref="T:System.Data.DataTable"/>。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.Putin(Fireasy.Data.Entity.IEntity,System.Data.DataTable)">
            <summary>
            将一个实体对象添加到 <see cref="T:System.Data.DataTable"/> 对象里，该 <see cref="T:System.Data.DataTable"/> 的结构必须保证与实体结构相符。
            </summary>
            <param name="entity">当前的实体对象。</param>
            <param name="table">一个使用 <see cref="M:Fireasy.Data.Entity.EntityExtension.Construct(Fireasy.Data.Entity.IEntity)"/> 构造的 <see cref="T:System.Data.DataTable"/>。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.Normalize``1(``0,System.Object[])">
            <summary>
            通过主键值使对象正常化。
            </summary>
            <param name="entity"></param>
            <param name="keyValues">主键值数组。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.SetState(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.EntityState)">
            <summary>
            设置实体的状态。
            </summary>
            <param name="entity">要设置状态的实体。</param>
            <param name="state">要设置的状态。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.TryLockModifing(Fireasy.Data.Entity.IEntity,System.Action)">
            <summary>
            锁定实体执行一个方法，即当前实体修改期间，不能再次对该实体进行操作。
            </summary>
            <param name="entity"></param>
            <param name="action"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.GetRootType(System.Type)">
            <summary>
            获取实体的根实体类型。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.GetBaseTypes(System.Type)">
            <summary>
            枚举实体的所有父实体类型。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.InternalExecuteEnumerable``1(Fireasy.Data.IDatabase,Fireasy.Data.IQueryCommand,Fireasy.Data.IDataSegment,Fireasy.Data.ParameterCollection,System.Action{System.Object},System.Action{System.Data.IDataReader,``0})">
            <summary>
            执行一个查询，返回一个序列。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="queryCommand"></param>
            <param name="segment"></param>
            <param name="parameters"></param>
            <param name="initializer"></param>
            <param name="setter"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.InternalExecuteEnumerable(Fireasy.Data.IDatabase,System.Type,Fireasy.Data.IQueryCommand,Fireasy.Data.IDataSegment,Fireasy.Data.ParameterCollection,System.Action{System.Object},System.Action{System.Data.IDataReader,System.Object})">
            <summary>
            执行一个查询，返回一个序列。
            </summary>
            <param name="database"></param>
            <param name="elementType"></param>
            <param name="queryCommand"></param>
            <param name="segment"></param>
            <param name="parameters"></param>
            <param name="initializer"></param>
            <param name="setter"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.InternalGetValue(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            获取实体指定属性的值。判断实体是否实现了 <see cref="T:Fireasy.Data.Entity.IEntityPropertyAccessor"/> 接口。
            </summary>
            <param name="entity"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.InternalSetValue(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.PropertyValue)">
            <summary>
            设置实体指定属性的值。判断实体是否实现了 <see cref="T:Fireasy.Data.Entity.IEntityPropertyAccessor"/> 接口。
            </summary>
            <param name="entity"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.InitializeInstanceName``1(``0,System.String)">
            <summary>
            如果对象实现了 <see cref="T:Fireasy.Data.Entity.IEntityPersistentInstanceContainer"/> 接口，则会将 <paramref name="instanceName"/> 附加到该对象。
            </summary>
            <param name="item"></param>
            <param name="instanceName"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.InitializeEnvironment``1(``0,Fireasy.Data.Entity.EntityPersistentEnvironment)">
            <summary>
            如果对象实现了 <see cref="T:Fireasy.Data.Entity.IEntityPersistentEnvironment"/> 接口，则会将 <paramref name="environment"/> 附加到该对象；
            </summary>
            <param name="item"></param>
            <param name="environment"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.ToDataColumn(Fireasy.Data.Entity.IProperty)">
            <summary>
            依据一个属性生成一个 <see cref="T:System.Data.DataColumn"/> 对象。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.InitByExpression(Fireasy.Data.Entity.IEntity,System.Linq.Expressions.LambdaExpression)">
            <summary>
            通过一个 <see cref="T:System.Linq.Expressions.MemberInitExpression"/> 表达式将属性值绑定到实体对象中。
            </summary>
            <param name="entity"></param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EntityExtension.Construct(System.Type)">
            <summary>
            使用指定的实体的属性集来构造一个 <see cref="T:System.Data.DataTable"/>，<see cref="T:System.Data.DataTable"/> 里的列与实体属性一一对应。
            </summary>
            <param name="entityType">实体的类型。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.EnumerableExtension">
            <summary>
            实体集的一些扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.EnumerableExtension.ToEntitySet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将一个实体序列转换为实体集。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="source">一个包含实体对象的序列。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EnumerableExtension.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            将一个实体序列转换为 <see cref="T:System.Data.DataTable"/> 对象。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="source">一个包含实体对象的序列。</param>
            <param name="tableName">指定 <see cref="T:System.Data.DataTable"/> 的表名，如果忽略该参数，则根据实体的类型进行获取。</param>
            <param name="changedOnly">仅仅转换状态改变的实体。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.EnumerableExtension.CreateTableColumns(System.Data.DataTable,System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.IProperty})">
            <summary>
            根据实体的属性建立 DataTable 的列。
            </summary>
            <param name="table"></param>
            <param name="properties"></param>
            <remarks>主键的数组。</remarks>
        </member>
        <member name="M:Fireasy.Data.Entity.EnumerableExtension.FillDataTableRows(System.Data.DataTable,System.Collections.IEnumerable,System.Collections.Generic.IList{Fireasy.Data.Entity.IProperty},System.Boolean,System.Nullable{Fireasy.Data.Entity.EntityState})">
            <summary>
            填充 DataTable 的数据行。
            </summary>
            <param name="table"></param>
            <param name="source"></param>
            <param name="properties"></param>
            <param name="hasPrmKey"></param>
            <param name="state"></param>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.GeneralProperty">
            <summary>
            一般的属性。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.GeneralProperty.ToString">
            <summary>
            输出列名称。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.GeneralProperty.Name">
            <summary>
            获取或设置属性的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.GeneralProperty.Type">
            <summary>
            获取或设置属性的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.GeneralProperty.EntityType">
            <summary>
            获取或设置实体类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.GeneralProperty.Info">
            <summary>
            获取或设置属性的映射信息。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.IdentityGenerateType">
            <summary>
            标识生成类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.IdentityGenerateType.None">
            <summary>
            无生成。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.IdentityGenerateType.AutoIncrement">
            <summary>
            使用自增长支持。如果不受支持则尝试使用 Generator 来生成标识。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.IdentityGenerateType.Generator">
            <summary>
            使用生成器生成。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.EntityQueryProvider">
            <summary>
            为实体提供 LINQ 查询的支持。无法继承此类。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.IEntityQueryProvider">
            <summary>
            为实体提供 LINQ 查询的支持。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ITranslateSupport">
            <summary>
            提供表达式的翻译支持。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.ITranslateSupport.Translate(System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Translators.TranslateOptions)">
            <summary>
            执行表达式的翻译。
            </summary>
            <param name="expression">查询表达式。</param>
            <param name="option">指定解析的选项。</param>
            <returns>翻译结果对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.IEntityQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            执行 <see cref="T:System.Linq.Expressions.Expression"/> 的查询，返回查询结果。
            </summary>
            <param name="expression">表示 LINQ 查询的表达式树。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.EntityQueryProvider.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.EntityQueryProvider"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.EntityQueryProvider.#ctor(Fireasy.Data.Entity.Linq.InternalContext)">
            <summary>
            使用一个 <see cref="T:Fireasy.Data.IDatabase"/> 对象初始化 <see cref="T:Fireasy.Data.Entity.Linq.EntityQueryProvider"/> 类的新实例。
            </summary>
            <param name="context">一个 <see cref="T:Fireasy.Data.Entity.Linq.InternalContext"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.EntityQueryProvider.#ctor(Fireasy.Data.IDatabase)">
            <summary>
            
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            执行 <see cref="T:System.Linq.Expressions.Expression"/> 的查询，返回查询结果。
            </summary>
            <param name="expression">表示 LINQ 查询的表达式树。</param>
            <returns>单值对象。</returns>
            <exception cref="T:Fireasy.Data.Entity.Linq.Translators.TranslateException">对 LINQ 表达式解析失败时抛出此异常。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.EntityQueryProvider.Translate(System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Translators.TranslateOptions)">
            <summary>
            执行表达式的翻译。
            </summary>
            <param name="expression">表示 LINQ 查询的表达式树。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.Linq.Translators.TranslateResult"/>。</returns>
            <param name="option">指定解析的选项。</param>
            <exception cref="T:Fireasy.Data.Entity.Linq.Translators.TranslateException">对 LINQ 表达式解析失败时抛出此异常。</exception>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.EntityQueryProvider.Fireasy#Data#Entity#IEntityPersistentEnvironment#Environment">
            <summary>
            获取或设置持久化环境。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.EntityQueryProvider.Fireasy#Data#Entity#IEntityPersistentInstanceContainer#InstanceName">
            <summary>
            获取或设置实例名称。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.AggregateExpression">
            <summary>
            表示SQL里的聚合运算的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.AggregateExpression.#ctor(System.Type,Fireasy.Data.Entity.Linq.Expressions.AggregateType,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.AggregateExpression"/> 类的新实例。
            </summary>
            <param name="type">函数的返回类型。</param>
            <param name="aggType">聚合函数的类型。</param>
            <param name="argument">聚合函数所包含的参数表达式。</param>
            <param name="isDistinct">是否使用 DISTINCT 关键字。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.AggregateExpression.Update(System.Type,Fireasy.Data.Entity.Linq.Expressions.AggregateType,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.AggregateExpression"/> 对象。
            </summary>
            <param name="type">函数的返回类型。</param>
            <param name="aggType">聚合函数的类型。</param>
            <param name="argument">聚合函数所包含的参数表达式。</param>
            <param name="isDistinct">是否使用 DISTINCT 关键字。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.AggregateExpression.AggregateType">
            <summary>
            获取聚合函数的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.AggregateExpression.Argument">
            <summary>
            获取聚合函数所包含的参数表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.AggregateExpression.IsDistinct">
            <summary>
            获取是否使用 DISTINCT 关键字。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression">
            <summary>
            表示在分组中进行的聚合运算的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression.#ctor(Fireasy.Data.Entity.Linq.Expressions.TableAlias,System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Expressions.ScalarExpression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression"/> 类的新实例。
            </summary>
            <param name="groupByAlias">分组表的别名。</param>
            <param name="aggregateInGroupSelect">聚合运算表达式。</param>
            <param name="aggregateAsSubquery">聚合子查询表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression.Update(Fireasy.Data.Entity.Linq.Expressions.ScalarExpression)">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression"/> 对象。
            </summary>
            <param name="subquery">聚合子查询表达式。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression.GroupByAlias">
            <summary>
            获取分组表的别名。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression.AggregateInGroupSelect">
            <summary>
            获取分组是的聚合运算表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.AggregateSubqueryExpression.AggregateAsSubquery">
            <summary>
            获取聚合子查询表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.AggregateType">
            <summary>
            聚合函数的类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.AggregateType.Count">
            <summary>
            计算序列的个数。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.AggregateType.Min">
            <summary>
            求序列中的最小值。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.AggregateType.Max">
            <summary>
            求序列中的最大值。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.AggregateType.Sum">
            <summary>
            对序列进行求和。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.AggregateType.Average">
            <summary>
            计算序列的平均值。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.AliasedExpression">
            <summary>
            一个抽象类，表示具有表的别名的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.AliasedExpression.#ctor(Fireasy.Data.Entity.Linq.Expressions.DbExpressionType,System.Type,Fireasy.Data.Entity.Linq.Expressions.TableAlias)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.AliasedExpression"/> 类的新实例。
            </summary>
            <param name="nodeType">表达式的类型。</param>
            <param name="type">表达式的数据类型。</param>
            <param name="alias">表的别名。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.AliasedExpression.Alias">
            <summary>
            获取表的别名。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.BetweenExpression">
            <summary>
            表示一个期间段的查询的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.BetweenExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.BetweenExpression"/> 类的新实例。
            </summary>
            <param name="argument">参数表达式。</param>
            <param name="lower">条件中小的一边的表达式。</param>
            <param name="upper">条件中大的一边的表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.BetweenExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.BetweenExpression"/> 对象。
            </summary>
            <param name="argument">参数表达式。</param>
            <param name="lower">条件中小的一边的表达式。</param>
            <param name="upper">条件中大的一边的表达式。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.BetweenExpression.Argument">
            <summary>
            获取参数表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.BetweenExpression.Lower">
            <summary>
            获取条件中小的一边的表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.BetweenExpression.Upper">
            <summary>
            获取条件中大的一边的表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.ColumnDeclaration">
            <summary>
            列达式的映射定义。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ColumnDeclaration.Name">
            <summary>
            返回列的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ColumnDeclaration.Expression">
            <summary>
            返回列表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression">
            <summary>
            表示数据列的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression.Equals(System.Object)">
            <summary>
            判断两个对象是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression.Equals(Fireasy.Data.Entity.Linq.Expressions.ColumnExpression)">
            <summary>
            判断两个对象是否相等。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression.ToString">
            <summary>
            输出对象的文本表示。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression.Alias">
            <summary>
            获取所属的表的别名。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression.Name">
            <summary>
            获取列的名称。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.ColumnAssignment">
            <summary>
            表示对列表达的参数映射。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ColumnAssignment.Column">
            <summary>
            获取列表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ColumnAssignment.Expression">
            <summary>
            获取值表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.DbExpressionExtensions">
            <summary>
            表达式的内部的扩展方法。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType">
            <summary>
            表达式节点的类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Table">
            <summary>
            数据表表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.ClientJoin">
            <summary>
            客户端连接。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Column">
            <summary>
            数据列表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Select">
            <summary>
            选择表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Projection">
            <summary>
            影射表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Entity">
            <summary>
            实体表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Join">
            <summary>
            链接表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Aggregate">
            <summary>
            聚合表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Scalar">
            <summary>
            标题表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Exists">
            <summary>
            存在判断表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.In">
            <summary>
            集合包含表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.OrderBy">
            <summary>
            排序表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Grouping">
            <summary>
            分组表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.AggregateSubquery">
            <summary>
            聚合子查询表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.IsNull">
            <summary>
            为空表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Between">
            <summary>
            期间表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.RowCount">
            <summary>
            行数表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.NamedValue">
            <summary>
            键值对表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.OuterJoined">
            <summary>
            外链接表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Function">
            <summary>
            行表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Condition">
            <summary>
            条件表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Segment">
            <summary>
            分段表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Insert">
            <summary>
            插入表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Delete">
            <summary>
            删除表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Update">
            <summary>
            更新表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Batch">
            <summary>
            批量操作表达式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.DbExpressionType.Block">
            <summary>
            命令块表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.DeleteCommandExpression">
            <summary>
            执行删除命令的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DeleteCommandExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.DeleteCommandExpression"/> 的新实例。
            </summary>
            <param name="table">操作的表的表达式。</param>
            <param name="where">条件表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.DeleteCommandExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.DeleteCommandExpression"/> 对象。
            </summary>
            <param name="table">操作的表的表达式。</param>
            <param name="where">条件表达式。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.DeleteCommandExpression.Table">
            <summary>
            获取操作的表的表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.DeleteCommandExpression.Where">
            <summary>
            获取条件表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.EntityExpression">
            <summary>
            表示数据实体的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.EntityExpression.#ctor(Fireasy.Data.Entity.Metadata.EntityMetadata,System.Linq.Expressions.Expression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.EntityExpression"/> 类的新实例。
            </summary>
            <param name="meta">实体元数据对象。</param>
            <param name="expression">定义的 Linq 表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.EntityExpression.Update(System.Linq.Expressions.Expression)">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.EntityExpression"/> 对象。
            </summary>
            <param name="expression">定义的 Linq 表达式。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.EntityExpression.Metadata">
            <summary>
            获取实体元数据对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.EntityExpression.Expression">
            <summary>
            获取定义的 Linq 表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.ExistsExpression">
            <summary>
            表示判断是否存在的表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.SubqueryExpression">
            <summary>
            表示子查询的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.SubqueryExpression.#ctor(Fireasy.Data.Entity.Linq.Expressions.DbExpressionType,System.Type,Fireasy.Data.Entity.Linq.Expressions.SelectExpression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.SubqueryExpression"/> 类的新实例。
            </summary>
            <param name="nodeType"></param>
            <param name="type"></param>
            <param name="select"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SubqueryExpression.Select">
            <summary>
            获取查询表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.ExistsExpression.#ctor(Fireasy.Data.Entity.Linq.Expressions.SelectExpression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ExistsExpression"/> 类的新实例。
            </summary>
            <param name="select">要判断的查询表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.ExistsExpression.Update(Fireasy.Data.Entity.Linq.Expressions.SelectExpression)">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ExistsExpression"/> 对象。
            </summary>
            <param name="select">要判断的查询表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.FunctionExpression">
            <summary>
            表示使用 SQL 函数的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.FunctionExpression.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.FunctionExpression"/> 类的新实例。
            </summary>
            <param name="type">函数的返回类型。</param>
            <param name="name">函数的名称。</param>
            <param name="arguments">函数所包含的参数表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.FunctionExpression.Update(System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.FunctionExpression"/> 对象。
            </summary>
            <param name="name">函数的名称。</param>
            <param name="arguments">函数所包含的参数表达式。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.FunctionExpression.Name">
            <summary>
            获取函数的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.FunctionExpression.Arguments">
            <summary>
            获取函数所包含的参数表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.InExpression">
            <summary>
            表示 IN 查询的表达式。可以使用子查询进行查询，也可以使用一个常量集合进行查询。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.InExpression.#ctor(System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Expressions.SelectExpression)">
            <summary>
            使用子查询表达式初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.InExpression"/> 类的新实例。
            </summary>
            <param name="expression">IN 左边的列表达式。</param>
            <param name="select">子查询表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.InExpression.#ctor(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            使用常量表达式集合初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.InExpression"/> 类的新实例。
            </summary>
            <param name="expression">IN 左边的列表达式。</param>
            <param name="values">常量表达式集合。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.InExpression.Update(System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Expressions.SelectExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.InExpression"/> 对象。
            </summary>
            <param name="expression">IN 左边的列表达式。</param>
            <param name="select">子查询表达式。</param>
            <param name="values">常量表达式集合。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.InExpression.Expression">
            <summary>
            获取 IN 左边的列表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.InExpression.Values">
            <summary>
            表示常量的查询表达式集合。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.IsNullExpression">
            <summary>
            表示判断是否为空的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.IsNullExpression.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.IsNullExpression"/> 类的新实例。
            </summary>
            <param name="expression">要判断的表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.IsNullExpression.Update(System.Linq.Expressions.Expression)">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.IsNullExpression"/> 对象。
            </summary>
            <param name="expression">要判断的表达式。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.IsNullExpression.Expression">
            <summary>
            获取要判断的表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.JoinExpression">
            <summary>
            表示使用 JOIN 进行链接查询的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.JoinExpression.#ctor(Fireasy.Data.Entity.Linq.Expressions.JoinType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.JoinExpression"/> 类的新实例。
            </summary>
            <param name="joinType">JOIN 的类别。</param>
            <param name="left">JOIN 左边的查询表达式。</param>
            <param name="right">JOIN 右边的查询表达式。</param>
            <param name="condition">ON 条件表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.JoinExpression.Update(Fireasy.Data.Entity.Linq.Expressions.JoinType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.JoinExpression"/> 对象。
            </summary>
            <param name="joinType">JOIN 的类别。</param>
            <param name="left">JOIN 左边的查询表达式。</param>
            <param name="right">JOIN 右边的查询表达式。</param>
            <param name="condition">ON 条件表达式。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.JoinExpression.JoinType">
            <summary>
            获取 JOIN 的类别。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.JoinExpression.Left">
            <summary>
            获取 JOIN 左边的查询表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.JoinExpression.Right">
            <summary>
            获取 JOIN 右边的查询表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.JoinExpression.Condition">
            <summary>
            获取 ON 条件表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.JoinType">
            <summary>
            序列链接的类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.JoinType.CrossJoin">
            <summary>
            交叉链接。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.JoinType.InnerJoin">
            <summary>
            内链接。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.JoinType.CrossApply">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.JoinType.OuterApply">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.JoinType.LeftOuter">
            <summary>
            左链接。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.JoinType.RightOuter">
            <summary>
            右链接。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.OrderExpression">
            <summary>
            表示对查询结果进行排序的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.OrderExpression.#ctor(Fireasy.Data.Entity.Linq.Expressions.OrderType,System.Linq.Expressions.Expression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.OrderExpression"/> 类的新实例。
            </summary>
            <param name="orderType">排序的类别。</param>
            <param name="expression">参照的列表达式。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.OrderExpression.OrderType">
            <summary>
            获取排序的类别。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.OrderExpression.Expression">
            <summary>
            获取参照的列表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.OrderType">
            <summary>
            排序的类别。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.OrderType.Ascending">
            <summary>
            升序，从小到大排列。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Expressions.OrderType.Descending">
            <summary>
            降序，从大到小排列。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression">
            <summary>
            影射表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression.Select">
            <summary>
            获取查询表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression.Projector">
            <summary>
            获取 Linq 表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression.Aggregator">
            <summary>
            获取聚合表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.ProjectionExpression.IsSingleton">
            <summary>
            获取是否为单例。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.RowNumberExpression">
            <summary>
            行数表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.RowNumberExpression.OrderBy">
            <summary>
            获取所包含的排序表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.SegmentExpression">
            <summary>
            表示对数据进行分段查询的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.SegmentExpression.#ctor(Fireasy.Data.IDataSegment)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.SegmentExpression"/> 类的新实例。
            </summary>
            <param name="segment">数据分段对象。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SegmentExpression.Segment">
            <summary>
            获取数据分段对象。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.SelectExpression">
            <summary>
            表示 Entity 查询的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.Linq.Expressions.OrderExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.Linq.Expressions.ColumnDeclaration},System.Boolean)">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.SelectExpression"/> 对象。
            </summary>
            <param name="from">查询的表或子查询表达式。</param>
            <param name="where">条件表达式。</param>
            <param name="orderBy">排序表达式集合。</param>
            <param name="groupBy">分组表达式集合。</param>
            <param name="skip">跳过的数量表达式。</param>
            <param name="take">返回的数量表达式。</param>
            <param name="segment">分段表达式。</param>
            <param name="isDistinct">是否使用 Distinct 关键字。</param>
            <param name="columns">返回的列表达式集合。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.Columns">
            <summary>
            获取返回的列表达式集合。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.From">
            <summary>
            获取查询的表或子查询表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.Where">
            <summary>
            获取条件表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.OrderBy">
            <summary>
            获取排序表达式集合。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.GroupBy">
            <summary>
            获取分组表达式集合。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.IsDistinct">
            <summary>
            获取是否使用 Distinct 关键字。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.Skip">
            <summary>
            获取跳过的数量表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.Take">
            <summary>
            获取返回的数量表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.SelectExpression.Segment">
            <summary>
            获取分段表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.TableAlias">
            <summary>
            表示表的别名。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.TableExpression">
            <summary>
            表示数据表的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.TableExpression.ToString">
            <summary>
            输出表的名称。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.TableExpression.Name">
            <summary>
            获取数据表的名称。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression">
            <summary>
            执行更新命令的表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.Linq.Expressions.ColumnAssignment})">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression"/> 类的新实例。
            </summary>
            <param name="table">表的表达式。</param>
            <param name="where">条件表达式。</param>
            <param name="arguments">更新的列表达式集合。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.Linq.Expressions.ColumnAssignment})">
            <summary>
            更新 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression"/> 对象。
            </summary>
            <param name="table">表的表达式。</param>
            <param name="where">条件表达式。</param>
            <param name="arguments">更新的列表达式集合。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression.Table">
            <summary>
            获取操作的表的表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression.Where">
            <summary>
            获取条件表达式。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Expressions.UpdateCommandExpression.Assignments">
            <summary>
            获取需要更新的列表达式集合。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Extensions">
            <summary>
            LINQ 扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.Segment``1(System.Linq.IQueryable{``0},Fireasy.Data.IDataSegment)">
            <summary>
            使用 <see cref="T:Fireasy.Data.IDataSegment"/> 对象对序列进行分段筛选，如果使用 <see cref="T:Fireasy.Data.DataPager"/>，则可返回详细的分页信息(数据行数和页码总数)。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="source">要进行分段的序列。</param>
            <param name="segment">分段对象，可使用 <see cref="T:Fireasy.Data.DataPager"/>。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">参数 source 为空时抛出此异常。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.AssertWhere``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据断言进行序列的筛选。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="condition">要计算的条件表达式。如果条件为 true，则进行筛选，否则不筛选。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.AssertWhere``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据断言进行序列的筛选。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="condition">要计算的条件表达式。如果条件为 true，则进行筛选，否则不筛选。</param>
            <param name="isTruePredicate">用于条件为 true 时测试每个元素是否满足条件的函数。</param>
            <param name="isFalsePredicate">用于条件为 false 时测试每个元素是否满足条件的函数。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.BatchOr``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            使用集合中的元素根据测试条件进行(或者)连接。
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TVar"></typeparam>
            <param name="source"></param>
            <param name="collection">包含测试条件中第二个参数的对象集合。</param>
            <param name="predicate">用于连接的测试函数。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.BatchAnd``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            使用集合中的元素根据测试条件进行(并且)连接。
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TVar"></typeparam>
            <param name="source"></param>
            <param name="collection">包含测试条件中第二个参数的对象集合。</param>
            <param name="predicate">用于连接的测试函数。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.OrderBy``1(System.Linq.IQueryable{``0},Fireasy.Data.SortDefinition,System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}}})">
            <summary>
            使用一个排序定义对象对集合中的元素进行排序。
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="sort">排序定义。</param>
            <param name="otherwise">当 <paramref name="sort"/> 为 Empty 时，使用此表达式进行排序。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.ThenBy``1(System.Linq.IQueryable{``0},Fireasy.Data.SortDefinition,System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}}})">
            <summary>
            使用一个排序定义对象对集合中的元素执行后续排序。
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="sort">排序定义。</param>
            <param name="otherwise">当 <paramref name="sort"/> 为 Empty 时，使用此表达式进行排序。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,Fireasy.Data.SortOrder,System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}}})">
            <summary>
            使用一个属性名对集合中的元素进行排序。
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="memberName">作为排序的键名称。</param>
            <param name="sortOrder">排序类型。</param>
            <param name="otherwise">当 <paramref name="memberName"/> 为空时，使用此表达式进行排序。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.ThenBy``1(System.Linq.IQueryable{``0},System.String,Fireasy.Data.SortOrder,System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}}})">
            <summary>
            使用一个属性名对集合中的元素执行后续排序。
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="memberName">作为排序的键名称。</param>
            <param name="sortOrder">排序类型。</param>
            <param name="otherwise">当 <paramref name="memberName"/> 为空时，使用此表达式进行排序。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.ExtendAs``1(Fireasy.Data.Entity.IEntity,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            将实体进行扩展，附加 <paramref name="selector"/> 表达式中的字段，返回 <typeparamref name="T"/> 类型的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.Extend(Fireasy.Data.Entity.IEntity,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            将实体进行动态扩展，附加 <paramref name="selector"/> 表达式中的字段。
            </summary>
            <param name="entity"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.CreateOrderExpression``1(System.Linq.IQueryable{``0},System.Reflection.MethodInfo,System.Reflection.PropertyInfo)">
            <summary>
            创建排序表达式。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="method"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.UseDefinitionQuery``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}}})">
            <summary>
            当客户端排序定义为空时，使用预定义的排序表达式。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="orderPredicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.GetByPrimary``1(Fireasy.Data.Entity.Linq.QuerySet{``0},System.Object[])">
            <summary>
            使用主键返回一个实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set"></param>
            <param name="primaryValues"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.CreateEntity``1(Fireasy.Data.Entity.Linq.QuerySet{``0},``0)">
            <summary>
            创建一个实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.UpdateEntity``1(Fireasy.Data.Entity.Linq.QuerySet{``0},``0)">
            <summary>
            更新一个实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.RemoveEntity``1(Fireasy.Data.Entity.Linq.QuerySet{``0},``0,System.Boolean)">
            <summary>
            移除一个实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set"></param>
            <param name="entity"></param>
            <param name="fake"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.RemoveByPrimary``1(Fireasy.Data.Entity.Linq.QuerySet{``0},System.Object[],System.Boolean)">
            <summary>
            通过主键删除一个实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set"></param>
            <param name="primaryKeys"></param>
            <param name="fake"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.RemoveWhere``1(Fireasy.Data.Entity.Linq.QuerySet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            根据LINQ删除实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set"></param>
            <param name="predicate"></param>
            <param name="fake"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.UpdateWhere``1(Fireasy.Data.Entity.Linq.QuerySet{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据LINQ更新实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set"></param>
            <param name="entity"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.UpdateWhere``1(Fireasy.Data.Entity.Linq.QuerySet{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据LINQ更新实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set"></param>
            <param name="calculator"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Extensions.BindPrimaryExpression``1(System.Object[])">
            <summary>
            构建主键查询表达式。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryValues"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Extensions.OrderGatherer">
            <summary>
            用于收集表达式中使用的排序表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Grouping`2">
            <summary>
            提供对 LINQ 表达式的分组查询。无法继承此类。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Grouping`2"/> 类的新实例。
            </summary>
            <param name="key">表示分组中的键。</param>
            <param name="elements">一个元素的序列。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Grouping`2.GetEnumerator">
            <summary>
            返回枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Grouping`2.Key">
            <summary>
            获取该序列的键。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.QueryProvider">
            <summary>
            提供对象查询的基本方法。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.QueryProvider.#ctor(Fireasy.Data.Entity.Linq.IEntityQueryProvider)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.QueryProvider"/> 类的新实例。
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.QueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            构造一个 <see cref="T:System.Linq.IQueryable"/> 对象，该对象可计算指定表达式树所表示的查询。
            </summary>
            <param name="expression">表示 LINQ 查询的表达式树</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.QueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            构造一个 <see cref="T:System.Linq.IQueryable"/> 对象，该对象可计算指定表达式树所表示的查询。
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="expression">表示 LINQ 查询的表达式树</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.QueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            执行指定表达式树所表示的查询。
            </summary>
            <param name="expression">表示 LINQ 查询的表达式树</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.QueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            执行指定表达式树所表示的查询。
            </summary>
            <typeparam name="TResult">执行查询所生成的值的类型。</typeparam>
            <param name="expression">表示 LINQ 查询的表达式树</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.QueryProvider.Fireasy#Data#Entity#Linq#Translators#ITranslateSupport#Translate(System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Translators.TranslateOptions)">
            <summary>
            执行表达式的翻译。
            </summary>
            <param name="expression">表示 LINQ 查询的表达式树。</param>
            <param name="option">指定解析的选项。</param>
            <returns>翻译结果。</returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.AggregateChecker">
            <summary>
            Determines if a SelectExpression contains any aggregate expressions
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.AggregateRewriter">
            <summary>
            Rewrite aggregate expressions, moving them into same select expression that has the group-by clause
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ColumnProjector">
            <summary>
            Splits an expression into two parts
              1) a list of column declarations for sub-expressions that must be evaluated on the server
              2) a expression that describes how to combine/project the columns back together into the correct result
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ColumnProjector.Nominator">
            <summary>
            Nominator is a class that walks an expression tree bottom up, determining the set of 
            candidate expressions that are possible columns of a select expression
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.CrossApplyRewriter">
            <summary>
            Attempts to rewrite cross-apply and outer-apply joins as inner and left-outer joins
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.CrossApplyRewriter.VisitJoin(Fireasy.Data.Entity.Linq.Expressions.JoinExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.JoinExpression"/>。
            </summary>
            <param name="join">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.DbExpressionComparer">
            <summary>
            表达式执行比较的相关方法。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.DbExpressionReplacer">
            <summary>
            用于在 ELinq 表达式中搜寻目录表达式，并将找到的表达式替换为指定的表达式。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.DbExpressionReplacer.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Translators.DbExpressionReplacer"/> 类的新实例。
            </summary>
            <param name="searchFor">搜寻的目标表达式。</param>
            <param name="replaceWith">替换的表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.DbExpressionReplacer.#ctor(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Translators.DbExpressionReplacer"/> 类的新实例。
            </summary>
            <param name="searchFor">搜寻的目标表达式。</param>
            <param name="replaceWithFunc">替换的表达式。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.DbExpressionReplacer.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            在表达式中搜寻，如果找到表达式，则进行替换。
            </summary>
            <param name="expression">要搜寻的表达式。</param>
            <param name="searchFor">搜寻的目标表达式。</param>
            <param name="replaceWith">替换的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.DbExpressionReplacer.ReplaceAll(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression[])">
            <summary>
            替换所有已经找到的表达式。
            </summary>
            <param name="expression">要搜寻的表达式。</param>
            <param name="searchFor">搜寻的目标表达式。</param>
            <param name="replaceWith">替换的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.DbExpressionReplacer.Visit(System.Linq.Expressions.Expression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.Expression"/>。
            </summary>
            <param name="exp">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.DeclaredAliasGatherer">
            <summary>
             returns the set of all aliases produced by a query source
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.LogicalDeleteFlagRewriter">
            <summary>
            用于为具有假删除标记的查询表达式添加标记条件。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.LogicalDeleteFlagRewriter.VisitSelect(Fireasy.Data.Entity.Linq.Expressions.SelectExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.SelectExpression"/>。
            </summary>
            <param name="select">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.LogicalDeleteFlagRewriter.VisitColumn(Fireasy.Data.Entity.Linq.Expressions.ColumnExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ColumnExpression"/>。
            </summary>
            <param name="column">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.Indentation">
            <summary>
            语法的缩进样式。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Translators.Indentation.Same">
            <summary>
            保持相同的级别。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Translators.Indentation.Inner">
            <summary>
            向内缩进。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Linq.Translators.Indentation.Outer">
            <summary>
            向外缩进。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.OrderByRewriter">
            <summary>
            用于将 ELinq 表达式树中的 OrderBy 提升至外部。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.OrderByRewriter.PrependOrderings(System.Collections.Generic.IList{Fireasy.Data.Entity.Linq.Expressions.OrderExpression})">
            <summary>
            Add a sequence of order expressions to an accumulated list, prepending so as
            to give precedence to the new expressions over any previous expressions
            </summary>
            <param name="newOrderings"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.OrderByRewriter.RebindOrderings(System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.Linq.Expressions.OrderExpression},Fireasy.Data.Entity.Linq.Expressions.TableAlias,System.Collections.Generic.HashSet{Fireasy.Data.Entity.Linq.Expressions.TableAlias},System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.Linq.Expressions.ColumnDeclaration})">
            <summary>
            Rebind order expressions to reference a new alias and add to column declarations if necessary
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ParameterRewriter">
            <summary>
            用于将表达式中的参数表达式替换为常量表示。无法继承此类。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.ParameterRewriter.#ctor(System.Linq.Expressions.ParameterExpression,System.Object)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Translators.ParameterRewriter`2"/> 类的新实例。
            </summary>
            <param name="parExp"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.ParameterRewriter.Rewrite(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Object)">
            <summary>
            将表达式中的指定参数表达式替换为指定的常量进行表示。
            </summary>
            <param name="expression">要搜寻的表达式。</param>
            <param name="parExp">要搜寻的参数表达式。</param>
            <param name="obj">替换的常量。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.ParameterRewriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ParameterExpression"/>。
            </summary>
            <param name="p">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ProjectedColumns">
            <summary>
            Result from calling ColumnProjector.ProjectColumns
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.QueryBinder">
            <summary>
            用于将 Linq 查询表达式转换为 ELinq 表达式树表示。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.Bind(System.Linq.Expressions.Expression,Fireasy.Data.Syntax.ISyntaxProvider)">
            <summary>
            将 Linq 查询表达式绑定为 ELinq 表示。
            </summary>
            <param name="expression">Linq 表达式。</param>
            <param name="syntax"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.MethodCallExpression"/> 的子级。
            </summary>
            <param name="node">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ConstantExpression"/>。
            </summary>
            <param name="c">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ParameterExpression"/>。
            </summary>
            <param name="p">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.InvocationExpression"/>。
            </summary>
            <param name="iv">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.MemberExpression"/>。
            </summary>
            <param name="m">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.GetLambda(System.Linq.Expressions.Expression)">
            <summary>
            获取 Lambda 表达式。
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.GetNextAlias">
            <summary>
            获取下一个表别名。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.ProjectColumns(System.Linq.Expressions.Expression,Fireasy.Data.Entity.Linq.Expressions.TableAlias,Fireasy.Data.Entity.Linq.Expressions.TableAlias[])">
            <summary>
            影射表达式中的所有列表达式。
            </summary>
            <param name="expression"></param>
            <param name="newAlias"></param>
            <param name="existingAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.Visit(System.Linq.Expressions.Expression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.Expression"/>。
            </summary>
            <param name="exp">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.BindWhere(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            绑定 Where 子句。
            </summary>
            <param name="resultType"></param>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.BindSelect(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            绑定 Select 子句。
            </summary>
            <param name="resultType"></param>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.GetOrderExpressions(Fireasy.Data.Entity.Linq.Expressions.OrderType,System.Linq.Expressions.Expression)">
            <summary>
            获取排序表达式列表。
            </summary>
            <param name="orderType"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.ChangePersisterMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            改变 EntityPersister 的方法。
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.BindEntityContains(System.Collections.IEnumerable,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            处理实体集的Contains方法
            </summary>
            <param name="enumerable"></param>
            <param name="parExp"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.BindDelete(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
            <summary>
            绑定 Delete 命令。
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="fakeExp"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.BindUpdate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            绑定 Update 命令。
            </summary>
            <param name="source"></param>
            <param name="instance"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.BindConcurrencyLockingExpression(System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            加入并发控制条件生成新的表达式。
            </summary>
            <param name="instance"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryBinder.IsQueryable(System.Linq.Expressions.Expression)">
            <summary>
            判断是否为 IQueryable
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryUtility.CanBeColumnExpression(System.Linq.Expressions.Expression)">
            <summary>
            判断表达式是否可用为 Column 使用。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryUtility.GetInsertArguments(Fireasy.Data.Syntax.ISyntaxProvider,Fireasy.Data.Entity.Linq.Expressions.TableExpression,Fireasy.Data.Entity.IEntity)">
            <summary>
            返回插入具体实体时的 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ColumnAssignment"/> 集合。
            </summary>
            <param name="syntax"></param>
            <param name="table"></param>
            <param name="entity">具体的实体。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryUtility.GetInsertArguments(Fireasy.Data.Syntax.ISyntaxProvider,Fireasy.Data.Entity.Linq.Expressions.TableExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            返回插入具体实体时的 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.ColumnAssignment"/> 集合。
            </summary>
            <param name="syntax"></param>
            <param name="table"></param>
            <param name="parExp"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryUtility.GetModifiedProperties(Fireasy.Data.Entity.IEntity)">
            <summary>
            获取实体可插入或更新的非主键属性列表。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryUtility.IsAopButNotProxy(System.Type)">
            <summary>
            判断是否使用轻量级实体模型，但不是使用代理类，或是没有实现 IEntityStatefulExtension 接口。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryUtility.GetPrimaryValueExpression(Fireasy.Data.Syntax.ISyntaxProvider,Fireasy.Data.Entity.Linq.Expressions.TableExpression,System.Linq.Expressions.ParameterExpression,Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            获取主键值的表达式。
            </summary>
            <param name="syntax"></param>
            <param name="table"></param>
            <param name="parExp"></param>
            <param name="entity"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryUtility.GetConvertableValue(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            获取受 <see cref="T:Fireasy.Data.Converter.IValueConverter"/> 支持的数据转换值。
            </summary>
            <param name="entity"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.QueryUtility.GetFirstEntityFromContext">
            <summary>
            在批处理的指令中获取第一个实体对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.RedundantColumnRemover">
            <summary>
            Removes duplicate column declarations that refer to the same underlying column
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.RedundantJoinRemover">
            <summary>
            Removes joins expressions that are identical to joins that already exist
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.RedundantSubqueryRemover">
            <summary>
            Removes select expressions that don't add any additional semantic value
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.ReferencedAliasGatherer">
            <summary>
             returns the set of all aliases produced by a query source
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.RelationshipBinder">
            <summary>
            Translates accesses to relationship members into projections or joins
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.SelectGatherer">
            <summary>
            returns the list of SelectExpressions accessible from the source expression
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.SingletonProjectionRewriter">
            <summary>
            Rewrites nested singleton projection into server-side joins
            </summary>
        </member>
        <!-- 对于成员“T:Fireasy.Data.Entity.Linq.Translators.SkipToRowNumberRewriter”忽略有格式错误的 XML 注释 -->
        <member name="T:Fireasy.Data.Entity.Linq.Translators.SQLiteTranslateProvider">
            <summary>
            SQLite 数据库类型的 ELinq 翻译器提供者。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.SQLiteTranslateProvider.CreateTranslator">
            <summary>
            获取一个 ELinq 翻译器。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.SQLiteTranslator">
            <summary>
            SQLite 数据库类型的 ELinq 翻译器。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.SQLiteTranslator.VisitSelect(Fireasy.Data.Entity.Linq.Expressions.SelectExpression)">
            <summary>
            访问 <see cref="T:Fireasy.Data.Entity.Linq.Expressions.SelectExpression"/>。
            </summary>
            <param name="select">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.SubqueryRemover">
            <summary>
            Removes one or more SelectExpression's by rewriting the expression tree to not include them, promoting
            their from clause expressions and rewriting any column expressions that may have referenced them to now
            reference the underlying data directly.
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.TranslateException">
            <summary>
            ELinq 表示表达式翻译时发生的异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslateException.#ctor(System.Linq.Expressions.Expression,System.Exception)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Translators.TranslateException"/> 类的新实例。
            </summary>
            <param name="expression">正在翻译的 ELinq 表达式。</param>
            <param name="exception">内部异常。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateException.Expression">
            <summary>
            获取正在翻译的表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.TranslateOptions">
            <summary>
            ELinq 表达式的翻译选项。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Linq.Translators.TranslateOptions.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Linq.Translators.TranslateOptions"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateOptions.HideColumnAliases">
            <summary>
            获取或设置是否隐藏列的别名。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateOptions.HideTableAliases">
            <summary>
            获取或设置是否隐藏表的别名。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateOptions.AttachQuote">
            <summary>
            获取或设置是否附加逃逸符。默认为 true。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateOptions.AttachParameter">
            <summary>
            获取或设置是否返回查询参数。默认为 false。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateOptions.WhereOnly">
            <summary>
            获取或设置是否仅仅生成条件。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateOptions.UseCache">
            <summary>
            获取或设置是否缓存。默认为 true。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.TranslateResult">
            <summary>
            ELinq 表达式的翻译结果。无法继承此类。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateResult.QueryText">
            <summary>
            获取翻译的查询文本。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateResult.Parameters">
            <summary>
            获取参数集合。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateResult.DataSegment">
            <summary>
            获取数据分段对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Linq.Translators.TranslateResult.NestedResults">
            <summary>
            获取嵌套结果列表。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Linq.Translators.UnusedColumnRemover">
            <summary>
            Removes column declarations in SelectExpression's that are not referenced
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.LoadBehavior">
            <summary>
            关系型属性的加载行为。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.LoadBehavior.None">
            <summary>
            程序不做任何的操作，人为进行加载。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.LoadBehavior.Always">
            <summary>
            在实体初始化时，始终加载关系型属性对象，数量较大时应谨慎使用，并注意两个实体间是否存在相互关联的情况。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.LoadBehavior.Lazy">
            <summary>
            默认行为，要首次使用关系型属性时，才进行延迟加载。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Metadata.EntityMetadata">
            <summary>
            用于描述实体结构的元数据。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Metadata.EntityMetadata.#ctor(System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Metadata.EntityMetadata"/> 类的新实例。
            </summary>
            <param name="entityType">一个实体的类型。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Metadata.EntityMetadata.InternalAddProperty(Fireasy.Data.Entity.IProperty)">
            <summary>
            往集合中添加一个属性。
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityMetadata.EntityType">
            <summary>
            获取实体的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityMetadata.TableName">
            <summary>
            获取数据表名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityMetadata.Description">
            <summary>
            获取或设置注释。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityMetadata.DeleteProperty">
            <summary>
            获取标识逻辑删除的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityMetadata.ConcurrencyProperties">
            <summary>
            获取标识并发控制的属性列表。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityMetadata.Properties">
            <summary>
            获取实体的所有属性列表。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityMetadata.EntityTree">
            <summary>
            获取实体树结构的元数据。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Metadata.EntityMetadataUnity">
            <summary>
            实体元数据的管理单元。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Metadata.EntityMetadataUnity.GetEntityMetadata(System.Type)">
            <summary>
            获取指定类型的实体元数据。
            </summary>
            <param name="entityType">实体类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Metadata.EntityMetadataUnity.InternalGetEntityMetadata(System.Type)">
            <summary>
            获取指定类型的实体元数据的内部方法。
            </summary>
            <param name="entityType">实体类型。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Metadata.EntityTreeMetadata">
            <summary>
            用于描述实体树结构的元数据。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.CreateMetadata(System.Type,Fireasy.Data.Entity.EntityTreeMappingAttribute)">
            <summary>
            使用实体类型和 <see cref="T:Fireasy.Data.Entity.EntityTreeMappingAttribute"/> 对象创建一个 <see cref="T:Fireasy.Data.Entity.Metadata.EntityTreeMetadata"/> 对象。
            </summary>
            <param name="attribute"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.InitTreeMetadata(Fireasy.Data.Entity.IProperty)">
            <summary>
            通过属性初始元数据结构。
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.InnerSign">
            <summary>
            获取标识内部标记。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.Level">
            <summary>
            获取标识级别的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.Order">
            <summary>
            获取标识排序的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.Name">
            <summary>
            获取标识名称的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.FullName">
            <summary>
            获取标识全名的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.HasChildren">
            <summary>
            获取标识是否有孩子的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.NameSeparator">
            <summary>
            获取或设置全名的名称分隔符。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.EntityTreeMetadata.SignLength">
            <summary>
            获取或设置标记的长度。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Metadata.EntityTypeInvalidException">
            <summary>
            指定的类型不属于实体类型时引发此异常，即类型未派生自 <see cref="T:Fireasy.Data.Entity.IEntity"/> 接口。无法继承此类。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Metadata.RelationshipMetadata">
            <summary>
            用于描述实体关系结构的元数据。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Metadata.RelationshipMetadata.#ctor(System.Type,System.Type,Fireasy.Data.Entity.RelationshipStyle,System.Collections.Generic.IEnumerable{Fireasy.Data.Entity.RelationshipKey})">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Metadata.RelationshipMetadata"/> 类的新实例。
            </summary>
            <param name="thisType"></param>
            <param name="otherType"></param>
            <param name="style"></param>
            <param name="keys"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.RelationshipMetadata.ThisType">
            <summary>
            获取或设置作为主体实体的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.RelationshipMetadata.OtherType">
            <summary>
            获取或设置作为客体实体的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.RelationshipMetadata.Keys">
            <summary>
            获取关系一组键对。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Metadata.RelationshipMetadata.Style">
            <summary>
            获取关系的定义方向。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyChangedEventArgs">
            <summary>
            为属性修改完成事件提供的参数。无法继承此类。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyChangedEventArgs.Property">
            <summary>
            获取所修改的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyChangedEventArgs.OldValue">
            <summary>
            获取属性修改前的值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyChangedEventArgs.NewValue">
            <summary>
            获取属性修改后的新值。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyChangingEventArgs">
            <summary>
            为属性修改完之前事件提供的参数。无法继承此类。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyChangingEventArgs.Property">
            <summary>
            获取所修改的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyChangingEventArgs.OldValue">
            <summary>
            获取属性修改前的值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyChangingEventArgs.NewValue">
            <summary>
            获取属性修改后的新值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyChangingEventArgs.Cancel">
            <summary>
            获取或设置是否取消属性的修改。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyEqualityComparer">
            <summary>
            定义方法以支持属性的对等比较。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.PropertyEqualityComparer.Default">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyEqualityComparer.Equals(Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.IProperty)">
            <summary>
            确定两个属性对象是否相等。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyEqualityComparer.GetHashCode(Fireasy.Data.Entity.IProperty)">
            <summary>
            获取指定属性对象的哈希码。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyMapInfo">
            <summary>
            标识实体属性的映射信息。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyMapInfo.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.PropertyMapInfo"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.FieldName">
            <summary>
            获取或设置列的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.Description">
            <summary>
            获取或设置列的注释。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.DataType">
            <summary>
            获取或设置列的数据类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.DefaultValue">
            <summary>
            获取或设置默认值。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.Length">
            <summary>
            获取或设置列的最大长度。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.Precision">
            <summary>
            获取或设置数值型列的精度。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.Scale">
            <summary>
            获取或设置数值型列的小数位数。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.GenerateType">
            <summary>
            获取或设置列的自动生成类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.IsPrimaryKey">
            <summary>
            获取或设置是否为主键。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.IsNullable">
            <summary>
            获取或设置是否可为空。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.IsDeletedKey">
            <summary>
            获取或设置是否为假删除标识。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.IsConcurrencyKey">
            <summary>
            获取或设置是否为并发控制标志。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.PropertyMapInfo.ReflectionInfo">
            <summary>
            获取属性所对应的 <see cref="T:System.Reflection.PropertyInfo"/> 对象。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyNotFoundException">
            <summary>
            属性没有找到时引发此异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyNotFoundException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.PropertyNotFoundException"/> 类的新实例。
            </summary>
            <param name="propertyName">属性名称。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyUnity">
            <summary>
            实体属性的管理单元。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Fireasy.Data.Entity.PropertyMapInfo)">
            <summary>
            注册基本的实体属性。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="expression">指定注册的属性的表达式。</param>
            <param name="info">属性映射信息。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.RegisterProperty(System.String,System.Type,System.Type,Fireasy.Data.Entity.PropertyMapInfo)">
            <summary>
            注册基本的实体属性。
            </summary>
            <param name="propertyName">属性名称。</param>
            <param name="propertyType">属性类型。</param>
            <param name="entityType">实体类型。</param>
            <param name="info">属性映射信息。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.RegisterSupposedProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.RelationOptions)">
            <summary>
            注册特殊的实体属性，这类属性为附加自实体间关系的不可持久化的属性。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="expression">指定注册的属性的表达式。</param>
            <param name="referenceProperty">参数或引用的属性。</param>
            <param name="options">关联选项。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.RegisterSupposedProperty(System.String,System.Type,System.Type,Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.RelationOptions)">
            <summary>
            注册特殊的实体属性，这类属性为附加自实体间关系的不可持久化的属性。
            </summary>
            <param name="propertyName">属性名称。</param>
            <param name="propertyType">属性类型。</param>
            <param name="entityType">实体类型。</param>
            <param name="referenceProperty">参数或引用的属性。</param>
            <param name="options">关联选项。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.RegisterProperty(System.Type,Fireasy.Data.Entity.IProperty)">
            <summary>
            注册实体属性，将属性放入到缓存表中。
            </summary>
            <param name="entityType">实体类型。</param>
            <param name="property">实体属性。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.GetProperty(System.Type,System.String,System.Boolean)">
            <summary>
            获取指定名称的实体属性。
            </summary>
            <param name="entityType">实体类型。</param>
            <param name="propertyName">属性名称。</param>
            <param name="inherited">是否获取继承的实体属性。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.GetProperties(System.Type,System.Boolean)">
            <summary>
            获取实体的所有属性。
            </summary>
            <param name="entityType">实体类型。</param>
            <param name="inherited">是否获取继承的实体属性。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象枚举器。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.GetPrimaryProperties(System.Type,System.Boolean)">
            <summary>
            获取实体的具有主键的所有属性。
            </summary>
            <param name="entityType">实体类型。</param>
            <param name="inherited">是否获取继承的实体属性。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象枚举器。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.GetPersistentProperties(System.Type,System.Boolean)">
            <summary>
            获取实体的可持久化的属性。
            </summary>
            <param name="entityType">实体类型。</param>
            <param name="inherited">是否获取继承的实体属性。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象枚举器。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.GetLoadedProperties(System.Type,System.Boolean)">
            <summary>
            获取实体的可以加载的属性。
            </summary>
            <param name="entityType">实体类型。</param>
            <param name="inherited">是否获取继承的实体属性。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象枚举器。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.GetRelatedProperties(System.Type,System.Boolean,System.Nullable{Fireasy.Data.Entity.LoadBehavior})">
            <summary>
            获取实体的关联属性。
            </summary>
            <param name="entityType">实体类型。</param>
            <param name="inherited">是否获取继承的实体属性。</param>
            <param name="behavior">属性的加载行为。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象枚举器。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.RegisterProperty(System.Reflection.PropertyInfo,System.Type,Fireasy.Data.Entity.PropertyMapInfo)">
            <summary>
            注册基本的实体属性。
            </summary>
            <param name="propertyInfo">属性信息。</param>
            <param name="entityType">实体类型。</param>
            <param name="info">属性映射信息。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.RegisterSupposedProperty(System.Reflection.PropertyInfo,System.Type,Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.RelationOptions)">
            <summary>
            注册特殊的实体属性，这类属性为附加自实体间关系的不可持久化的属性。
            </summary>
            <param name="propertyInfo">属性名称。</param>
            <param name="entityType">实体类型。</param>
            <param name="referenceProperty">参数或引用的属性。</param>
            <param name="options">关联选项。</param>
            <returns>一个 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.InitPropertyInfo(Fireasy.Data.Entity.PropertyMapInfo,System.Reflection.PropertyInfo)">
            <summary>
            初始化属性映射信息。
            </summary>
            <param name="info">实体映射信息。</param>
            <param name="propertyInfo">属性信息。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.InitRelatedPropertyInfo(System.Reflection.PropertyInfo)">
            <summary>
            初始化属性映射信息。
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.PropertyUnity.IsNeedCorrectDefaultValue(Fireasy.Data.Entity.IProperty)">
            <summary>
            判断属性是否需要纠正默认值的类型。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.PropertyUnity.PropertySearchVisitor">
            <summary>
            在表达式中搜索属性的信息。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.ReferenceProperty">
            <summary>
            通过实体关系引用另一个实体的属性。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Properties.ReferenceProperty.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Properties.ReferenceProperty"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Properties.ReferenceProperty.Reference">
            <summary>
            获取或设置参照的属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.RelationOptions">
            <summary>
            关系属性的选项。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.RelationOptions.Default">
            <summary>
            缺省的关联属性选项。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.RelationOptions.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.RelationOptions"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.RelationOptions.#ctor(Fireasy.Data.Entity.LoadBehavior)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.RelationOptions"/> 类的新实例。
            </summary>
            <param name="loadBehavior">加载行为。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.RelationOptions.LoadBehavior">
            <summary>
            获取或设置属性的加载行为。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Properties.RelationPropertyType">
            <summary>
            关系型属性类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Properties.RelationPropertyType.Entity">
            <summary>
            引用实体属性类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Properties.RelationPropertyType.EntitySet">
            <summary>
            实体集属性类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Properties.RelationPropertyType.Enum">
            <summary>
            枚举转换属性类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Properties.RelationPropertyType.RefProperty">
            <summary>
            引用属性类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Properties.RelationPropertyType.Other">
            <summary>
            其他。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.RelationshipAttribute">
            <summary>
            定义两个实体之间的关系，通过由父实体与子实体构成一对多的关系。父实体应包含一个子实体集合属性，同时子实体应包含一个父实体的引用实体属性。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.RelationshipAttribute.#ctor(System.String,System.Type,System.Type,System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.RelationshipAttribute"/> 类的新实例。
            </summary>
            <param name="name">关系名称。</param>
            <param name="thisType">父实体类型。</param>
            <param name="otherType">子实体的类型。</param>
            <param name="keyExpression">键对表达式，如 "父键1=>子键1,父键2=>子键2"。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.RelationshipAttribute.Name">
            <summary>
            获取或设置关系名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.RelationshipAttribute.ThisType">
            <summary>
            获取或设置父实体类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.RelationshipAttribute.OtherType">
            <summary>
            获取或设置子实体的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.RelationshipAttribute.KeyExpression">
            <summary>
            获取或设置两者间的关系表达式。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.RelationshipStyle">
            <summary>
            描述关系的类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.RelationshipStyle.One2Many">
            <summary>
            一对多的关系。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.RelationshipStyle.Many2One">
            <summary>
            多对一的关系。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.RelationshipStyle.One2One">
            <summary>
            一对一的关系。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.RelationshipException">
            <summary>
            实体间关系错误时抛出此异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.RelationshipException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.RelationshipException"/> 类的新实例。
            </summary>
            <param name="message">异常的信息。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.RelationshipKey">
            <summary>
            用于描述关系中的主从键对。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.RelationshipKey.ThisKey">
            <summary>
            获取或设置主体主属性名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.RelationshipKey.ThisProperty">
            <summary>
            获取主体主属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.RelationshipKey.OtherKey">
            <summary>
            获取或设置客体主属性名称。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.RelationshipKey.OtherProperty">
            <summary>
            获取客体主属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.RelationshipUnity">
            <summary>
            实体关系管理单元，用于从实体类型所属的程序集中获取所有 <see cref="T:Fireasy.Data.Entity.RelationshipAttribute"/> 定义的实体关系。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.RelationshipUnity.GetRelationship(Fireasy.Data.Entity.IProperty)">
            <summary>
            根据关联属性获取相应的实体关系。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.RelationshipUnity.GetAssemblyRelationships(System.Reflection.Assembly)">
            <summary>
            获取指定程序集中定义的所有关系。
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.RelationshipUnity.GetMetadataByRule(Fireasy.Data.Entity.Properties.RelationProperty)">
            <summary>
            根据规则获取实体关系。
            </summary>
            <param name="relProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.RelationshipUnity.MakeOne2ManyMetadata(System.Type,System.Type)">
            <summary>
            使用主键和外键对应构造一对多的关系。
            </summary>
            <param name="thisType"></param>
            <param name="otherType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.RelationshipUnity.ParseRelationshipKeys(System.Type,System.Type,System.String)">
            <summary>
            解析键对表达式。
            </summary>
            <param name="thisType"></param>
            <param name="otherType"></param>
            <param name="keyExpression">键对表达式，如 "父键1=>子键1,父键2=>子键2"。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.RowMapperFactory">
            <summary>
            数据行映射器的工厂。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.RowMapperFactory.CreateMapper(System.Type)">
            <summary>
            根据数据类型创建相应的映射器。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.RowMapperFactory.CreateMapper``1">
            <summary>
            根据数据类型创建相应的映射器。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Subscribes.EntityPersistentEventType">
            <summary>
            实体持久化的事件类型。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Subscribes.EntityPersistentEventType.BeforeCreate">
            <summary>
            创建实体之前。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Subscribes.EntityPersistentEventType.AfterCreate">
            <summary>
            创建实体之后。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Subscribes.EntityPersistentEventType.BeforeUpdate">
            <summary>
            更新实体之前。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Subscribes.EntityPersistentEventType.AfterUpdate">
            <summary>
            更新实体之后。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Subscribes.EntityPersistentEventType.BeforeRemove">
            <summary>
            移除实体之前。
            </summary>
        </member>
        <member name="F:Fireasy.Data.Entity.Subscribes.EntityPersistentEventType.AfterRemove">
            <summary>
            移除实体之后。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Subscribes.EntityPersistentSubject">
            <summary>
            实体持久化的消息主题。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Subscribes.EntityPersistentSubject.EntityType">
            <summary>
            获取实体类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Subscribes.EntityPersistentSubject.EventType">
            <summary>
            获取当前的事件类型。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Subscribes.EntityPersistentSubject.Filter">
            <summary>
            获取或设置过滤器。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Subscribes.EntityPersistentSubscriber">
            <summary>
            实体持久化的事件订阅器抽象类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Subscribes.EntityPersistentSubscriber.Fireasy#Common#Subscribe#ISubscriber#Accept(Fireasy.Common.Subscribe.ISubject)">
            <summary>
            接收主题信息。
            </summary>
            <param name="subject"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Subscribes.EntityPersistentSubscriber.OnBeforeCreate(Fireasy.Data.Entity.IEntity)">
            <summary>
            用于实体创建之前的通知。
            </summary>
            <param name="entity">创建的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Subscribes.EntityPersistentSubscriber.OnAfterCreate(Fireasy.Data.Entity.IEntity)">
            <summary>
            用于实体创建之后的通知。
            </summary>
            <param name="entity">创建的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Subscribes.EntityPersistentSubscriber.OnBeforeUpdate(Fireasy.Data.Entity.IEntity)">
            <summary>
            用于实体更新之前的通知。
            </summary>
            <param name="entity">更新的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Subscribes.EntityPersistentSubscriber.OnAfterUpdate(Fireasy.Data.Entity.IEntity)">
            <summary>
            用于实体更新之后的通知。
            </summary>
            <param name="entity">更新的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Subscribes.EntityPersistentSubscriber.OnBeforeRemove(Fireasy.Data.Entity.IEntity)">
            <summary>
            用于实体移除之前的通知。
            </summary>
            <param name="entity">移除的实体对象。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Subscribes.EntityPersistentSubscriber.OnAfterRemove(Fireasy.Data.Entity.IEntity)">
            <summary>
            用于实体移除之后的通知。
            </summary>
            <param name="entity">移除的实体对象。</param>
        </member>
        <member name="T:Fireasy.Data.Entity.UnrealEntityObject">
            <summary>
            一个没有实际意义的实体类型。无法继承此类。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Validation.EntityInvalidateException">
            <summary>
            使用 <see cref="T:Fireasy.Data.Entity.Validation.ValidationUnity"/> 类对属性的赋值进行验证时，如果值未通过其中一个验证器，则引发此异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.EntityInvalidateException.#ctor(System.Collections.Generic.Dictionary{Fireasy.Data.Entity.IProperty,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IList{System.String})">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Validation.EntityInvalidateException"/> 类的新实例。
            </summary>
            <param name="propertyErrors"></param>
            <param name="errors"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.EntityInvalidateException.#ctor(System.Exception)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Validation.EntityInvalidateException"/> 类的新实例。
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Fireasy.Data.Entity.Validation.EntityInvalidateException.Errors">
            <summary>
            获取实体全局验证的错误信息。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Validation.EntityInvalidateException.PropertyErrors">
            <summary>
            获取每一个属性验证的错误信息。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Validation.IMetadataContainer">
            <summary>
            提供元验证数据的初始化。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.IMetadataContainer.InitializeRules">
            <summary>
            初始化规则字典。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Validation.MetadataConverter`1">
            <summary>
            元数据转换器。无法继承此类。
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.MetadataConverter`1.Add(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            使用表达式来添加一个规则。
            </summary>
            <param name="expression">使用表达式来限定添加验证的属性。</param>
            <param name="attribute">一个 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> 实例。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.MetadataConverter`1.ToDictionary">
            <summary>
            将定义的规则输出为一个字典。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Data.Entity.Validation.IPropertyMarker">
            <summary>
            为 <see cref="!:ValidationAttribute"/> 标注其关联的 <see cref="T:Fireasy.Data.Entity.IProperty"/> 对象。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Validation.IPropertyMarker.Property">
            <summary>
            获取或设置关联的属性对象。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Validation.PropertyInvalidateException">
            <summary>
            使用 <see cref="T:Fireasy.Data.Entity.Validation.ValidationUnity"/> 类对属性的赋值进行验证时，如果值未通过其中一个验证器，则引发此异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.PropertyInvalidateException.#ctor(Fireasy.Data.Entity.IProperty,System.Collections.Generic.List{System.String})">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Validation.PropertyInvalidateException"/> 类的新实例。
            </summary>
            <param name="property">所验证的实体属性。</param>
            <param name="errors">验证器产生的错误信息列表。</param>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.PropertyInvalidateException.#ctor(Fireasy.Data.Entity.IProperty,System.Exception)">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Validation.PropertyInvalidateException"/> 类的新实例。
            </summary>
            <param name="property">所验证的实体属性。</param>
            <param name="exp">验证器产生的错误信息列表。</param>
        </member>
        <member name="P:Fireasy.Data.Entity.Validation.PropertyInvalidateException.Property">
            <summary>
            获取所验证的实体属性。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Validation.PropertyInvalidateException.Errors">
            <summary>
            获取错误验证器产生的信息列表。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Validation.UniqueCodeAttribute">
            <summary>
            表示属性在库里应该保证唯一。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.UniqueCodeAttribute.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Data.Entity.Validation.UniqueCodeAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.UniqueCodeAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            检查指定的值对于当前的验证特性是否有效。
            </summary>
            <param name="value">属性值。</param>
            <param name="validationContext">验证上下文对象。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Data.Entity.Validation.UniqueCodeAttribute.AllowNull">
            <summary>
            获取或设置是否允许置空。
            </summary>
        </member>
        <member name="P:Fireasy.Data.Entity.Validation.UniqueCodeAttribute.Property">
            <summary>
            获取或设置保证唯一性的属性。
            </summary>
        </member>
        <member name="T:Fireasy.Data.Entity.Validation.ValidationUnity">
            <summary>
            提供对实体及属性值验证的管理单元。
            </summary>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.Validate(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty,Fireasy.Data.Entity.PropertyValue,System.Action{Fireasy.Data.Entity.IProperty,System.Collections.Generic.IList{System.String}})">
            <summary>
            对实体指定属性的值进行验证。
            </summary>
            <param name="entity">要验证的实体。</param>
            <param name="property">要验证的实体属性。</param>
            <param name="value">将赋给属性的值。</param>
            <param name="callback">默认为 null。当实体属性验证失败时，可以使用该回调方法处理异常信息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> 或 <paramref name="property"/> 参数为 null。</exception>
            <exception cref="T:Fireasy.Data.Entity.Validation.PropertyInvalidateException">实体属性验证失败且 <paramref name="callback"/> 参数为 null。</exception>
            <returns>验证通过为 true，否则为 false。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.Validate(Fireasy.Data.Entity.IEntity)">
            <summary>
            对实体进行属性和逻辑验证，如果验证失败，则抛出 <see cref="T:Fireasy.Data.Entity.Validation.EntityInvalidateException"/> 异常。
            </summary>
            <param name="entity">要验证的实体。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> 参数为 null。</exception>
            <exception cref="T:Fireasy.Data.Entity.Validation.EntityInvalidateException">实体验证失败。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.GetValidations(Fireasy.Data.Entity.IProperty)">
            <summary>
            获取给实体属性定义的所有验证器序列，这些验证器通过 <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute"/> 特性所指定的类型列定义。
            </summary>
            <param name="property">要获取验证器的实体属性。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> 参数为 null。</exception>
            <returns>一个 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> 的序列。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.GetValidations(System.Type)">
            <summary>
            获取给实体定义的所有验证器序列，这些验证器通过 <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute"/> 特性所指定的类型列定义。
            </summary>
            <param name="entityType">一个实体的类型。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entityType"/> 参数为 null。</exception>
            <returns>一个 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> 的序列。</returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.RegisterValidation(System.Type,System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            为指定的实体属性注册一个验证器。
            </summary>
            <param name="entityType">一个实体的类型。</param>
            <param name="validation">要注册的验证器。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entityType"/>、<paramref name="property"/> 或 <paramref name="validation"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.RegisterValidation(Fireasy.Data.Entity.IProperty,System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            为指定的实体属性注册一个验证器。
            </summary>
            <param name="property">要注册验证器的实体属性。</param>
            <param name="validation">要注册的验证器。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> 或 <paramref name="validation"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.GetEntityValidations(System.Type)">
            <summary>
            获取指定实体的 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> 定义集。
            </summary>
            <param name="entityType">一个实体的类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.GetPropertyValidations(System.Type)">
            <summary>
            获取指定属性名称的 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> 定义集。
            </summary>
            <param name="entityType">一个实体的类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.CheckPropertyValid(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            检查属性是否有效。
            </summary>
            <param name="entityType"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.MarkValidationProperty(Fireasy.Data.Entity.IProperty,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            为一组 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> 实现接口 <see cref="T:Fireasy.Data.Entity.Validation.IPropertyMarker"/>。
            </summary>
            <param name="property"></param>
            <param name="validations"></param>
        </member>
        <member name="M:Fireasy.Data.Entity.Validation.ValidationUnity.CreateContext(Fireasy.Data.Entity.IEntity,Fireasy.Data.Entity.IProperty)">
            <summary>
            创建验证上下文对象。
            </summary>
            <param name="entity">当前验证的实体。</param>
            <param name="property">当前验证的属性。</param>
            <returns></returns>
        </member>
    </members>
</doc>
